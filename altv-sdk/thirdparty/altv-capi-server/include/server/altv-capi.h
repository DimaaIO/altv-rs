
/**
 * CAPI API Header for C
 * THIS HEADER IS AUTOGENERATED
 * Mon Jun  8 10:59:38 2020

 * 
 * Include header for alt:V C API
 */

#ifndef _CAPI_H_
#define _CAPI_H_

typedef struct alt_VectorLayout_float_3 {
    float** elements;
} alt_VectorLayout_float_3;

CAPI void alt_VectorLayout_float_3_CAPI_Free(struct alt_VectorLayout_float_3* ptr);

CAPI void alt_VectorLayout_float_3_Create(struct alt_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_CAPI_Heap();

CAPI void alt_VectorLayout_float_3_Create_1(float* _elements, struct alt_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_1_CAPI_Heap(float* _elements);

CAPI void alt_VectorLayout_float_3_Create_2(float* el, struct alt_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_2_CAPI_Heap(float* el);

CAPI float* alt_VectorLayout_float_3_Access_size_t(struct alt_VectorLayout_float_3* _instance, unsigned long long key);

CAPI float* alt_VectorLayout_float_3_Access_size_t_1(struct alt_VectorLayout_float_3* _instance, unsigned long long key);

CAPI void alt_VectorLayout_float_3_Create_3(struct alt_VectorLayout_float_3* _p0, struct alt_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_3_CAPI_Heap(struct alt_VectorLayout_float_3* _p0);

CAPI void alt_VectorLayout_float_3_Create_4(struct alt_VectorLayout_float_3* _p0, struct alt_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_4_CAPI_Heap(struct alt_VectorLayout_float_3* _p0);

CAPI void alt_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(struct alt_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);

CAPI void alt_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(struct alt_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);


typedef struct alt_VectorLayout_float_4 {
    float** elements;
} alt_VectorLayout_float_4;

CAPI void alt_VectorLayout_float_4_CAPI_Free(struct alt_VectorLayout_float_4* ptr);

CAPI void alt_VectorLayout_float_4_Create(struct alt_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_CAPI_Heap();

CAPI void alt_VectorLayout_float_4_Create_1(float* _elements, struct alt_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_1_CAPI_Heap(float* _elements);

CAPI void alt_VectorLayout_float_4_Create_2(float* el, struct alt_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_2_CAPI_Heap(float* el);

CAPI float* alt_VectorLayout_float_4_Access_size_t(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

CAPI float* alt_VectorLayout_float_4_Access_size_t_1(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

CAPI void alt_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0, struct alt_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_3_CAPI_Heap(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0, struct alt_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_4_CAPI_Heap(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

CAPI void alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


typedef struct alt_Vector_float_3_VectorLayout_float_3 {
    float** elements;
} alt_Vector_float_3_VectorLayout_float_3;

CAPI void alt_Vector_float_3_VectorLayout_float_3_CAPI_Free(struct alt_Vector_float_3_VectorLayout_float_3* ptr);

CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_VectorLayout_float_3_to_alt_Vector_float_3_VectorLayout_float_3(struct alt_VectorLayout_float_3* from);

CAPI struct alt_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_to_alt_VectorLayout_float_3(struct alt_Vector_float_3_VectorLayout_float_3* from);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create(struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_CAPI_Heap();

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_1(float* _elements, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_1_CAPI_Heap(float* _elements);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_2(float* el, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_2_CAPI_Heap(float* el);

CAPI float* alt_Vector_float_3_VectorLayout_float_3_Access_size_t(struct alt_Vector_float_3_VectorLayout_float_3* _instance, unsigned long long key);

CAPI float* alt_Vector_float_3_VectorLayout_float_3_Access_size_t_1(struct alt_Vector_float_3_VectorLayout_float_3* _instance, unsigned long long key);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_3(struct alt_VectorLayout_float_3* _p0, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_3_CAPI_Heap(struct alt_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_4(struct alt_VectorLayout_float_3* _p0, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_4_CAPI_Heap(struct alt_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);


CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_5(struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_5_CAPI_Heap();

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_6(float* _elements, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_6_CAPI_Heap(float* _elements);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_7(struct alt_VectorLayout_float_3* layout, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_7_CAPI_Heap(struct alt_VectorLayout_float_3* layout);

CAPI float alt_Vector_float_3_VectorLayout_float_3_LengthSqr(struct alt_Vector_float_3_VectorLayout_float_3* _instance);

CAPI float alt_Vector_float_3_VectorLayout_float_3_Length(struct alt_Vector_float_3_VectorLayout_float_3* _instance);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_8(struct alt_Vector_float_3_VectorLayout_float_3* _p0, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_8_CAPI_Heap(struct alt_Vector_float_3_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Create_9(struct alt_Vector_float_3_VectorLayout_float_3* _p0, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_9_CAPI_Heap(struct alt_Vector_float_3_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_constVector_float_3_VectorLayout_float_3Ref(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _p0);

CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_Vector_float_3_VectorLayout_float_3RefRef(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _p0);


typedef struct alt_Vector_float_4_VectorLayout_float_4 {
    float** elements;
} alt_Vector_float_4_VectorLayout_float_4;

CAPI void alt_Vector_float_4_VectorLayout_float_4_CAPI_Free(struct alt_Vector_float_4_VectorLayout_float_4* ptr);

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_VectorLayout_float_4_to_alt_Vector_float_4_VectorLayout_float_4(struct alt_VectorLayout_float_4* from);

CAPI struct alt_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_to_alt_VectorLayout_float_4(struct alt_Vector_float_4_VectorLayout_float_4* from);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create(struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_CAPI_Heap();

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_1(float* _elements, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_1_CAPI_Heap(float* _elements);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_2(float* el, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_2_CAPI_Heap(float* el);

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_3_CAPI_Heap(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_4_CAPI_Heap(struct alt_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_5(struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_5_CAPI_Heap();

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_6(float* _elements, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_6_CAPI_Heap(float* _elements);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_7(struct alt_VectorLayout_float_4* layout, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_7_CAPI_Heap(struct alt_VectorLayout_float_4* layout);

CAPI float alt_Vector_float_4_VectorLayout_float_4_LengthSqr(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

CAPI float alt_Vector_float_4_VectorLayout_float_4_Length(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_8(struct alt_Vector_float_4_VectorLayout_float_4* _p0, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_8_CAPI_Heap(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Create_9(struct alt_Vector_float_4_VectorLayout_float_4* _p0, struct alt_Vector_float_4_VectorLayout_float_4* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_CAPI_Free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_9_CAPI_Heap(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);


typedef struct alt_Vector_float_3_PointLayout {
    float x;
    float y;
    float z;
} alt_Vector_float_3_PointLayout;

CAPI void alt_Vector_float_3_PointLayout_CAPI_Free(struct alt_Vector_float_3_PointLayout* ptr);

CAPI struct alt_Vector_float_3_PointLayout* alt_PointLayout_to_alt_Vector_float_3_PointLayout(struct alt_PointLayout* from);

CAPI struct alt_PointLayout* alt_Vector_float_3_PointLayout_to_alt_PointLayout(struct alt_Vector_float_3_PointLayout* from);

CAPI void alt_Vector_float_3_PointLayout_Create(struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_CAPI_Heap();

CAPI void alt_Vector_float_3_PointLayout_Create_1(float _x, float _y, float _z, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_1_CAPI_Heap(float _x, float _y, float _z);

CAPI void alt_Vector_float_3_PointLayout_Create_2(float* elements, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_2_CAPI_Heap(float* elements);

CAPI float* alt_Vector_float_3_PointLayout_Access_size_t(struct alt_Vector_float_3_PointLayout* _instance, unsigned long long key);

CAPI float* alt_Vector_float_3_PointLayout_Access_size_t_1(struct alt_Vector_float_3_PointLayout* _instance, unsigned long long key);

CAPI void alt_Vector_float_3_PointLayout_Create_3(struct alt_PointLayout* _p0, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_3_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Create_4(struct alt_PointLayout* _p0, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_4_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Assign_constPointLayoutRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Assign_PointLayoutRefRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_PointLayout* _p0);


CAPI void alt_Vector_float_3_PointLayout_Create_5(struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_5_CAPI_Heap();

CAPI void alt_Vector_float_3_PointLayout_Create_6(float* _elements, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_6_CAPI_Heap(float* _elements);

CAPI void alt_Vector_float_3_PointLayout_Create_7(struct alt_PointLayout* layout, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_7_CAPI_Heap(struct alt_PointLayout* layout);

CAPI float alt_Vector_float_3_PointLayout_LengthSqr(struct alt_Vector_float_3_PointLayout* _instance);

CAPI float alt_Vector_float_3_PointLayout_Length(struct alt_Vector_float_3_PointLayout* _instance);

CAPI void alt_Vector_float_3_PointLayout_Create_8(struct alt_Vector_float_3_PointLayout* _p0, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_8_CAPI_Heap(struct alt_Vector_float_3_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Create_9(struct alt_Vector_float_3_PointLayout* _p0, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_9_CAPI_Heap(struct alt_Vector_float_3_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Assign_constVector_float_3_PointLayoutRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_Vector_float_3_PointLayout* _p0);

CAPI void alt_Vector_float_3_PointLayout_Assign_Vector_float_3_PointLayoutRefRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_Vector_float_3_PointLayout* _p0);


typedef struct alt_PointLayout {
    float x;
    float y;
    float z;
} alt_PointLayout;

CAPI void alt_PointLayout_CAPI_Free(struct alt_PointLayout* ptr);

CAPI void alt_PointLayout_Create(struct alt_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_PointLayout_CAPI_Free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_CAPI_Heap();

CAPI void alt_PointLayout_Create_1(float _x, float _y, float _z, struct alt_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_PointLayout_CAPI_Free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_1_CAPI_Heap(float _x, float _y, float _z);

CAPI void alt_PointLayout_Create_2(float* elements, struct alt_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_PointLayout_CAPI_Free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_2_CAPI_Heap(float* elements);

CAPI float* alt_PointLayout_Access_size_t(struct alt_PointLayout* _instance, unsigned long long key);

CAPI float* alt_PointLayout_Access_size_t_1(struct alt_PointLayout* _instance, unsigned long long key);

CAPI void alt_PointLayout_Create_3(struct alt_PointLayout* _p0, struct alt_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_PointLayout_CAPI_Free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_3_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_PointLayout_Create_4(struct alt_PointLayout* _p0, struct alt_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_PointLayout_CAPI_Free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_4_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_PointLayout_Assign_constPointLayoutRef(struct alt_PointLayout* _instance, struct alt_PointLayout* _p0);

CAPI void alt_PointLayout_Assign_PointLayoutRefRef(struct alt_PointLayout* _instance, struct alt_PointLayout* _p0);


typedef struct alt_PointPaddedLayout {
    float x;
    float y;
    float z;
    float pad;
} alt_PointPaddedLayout;

CAPI void alt_PointPaddedLayout_CAPI_Free(struct alt_PointPaddedLayout* ptr);

CAPI struct alt_PointPaddedLayout* alt_PointLayout_to_alt_PointPaddedLayout(struct alt_PointLayout* from);

CAPI struct alt_PointLayout* alt_PointPaddedLayout_to_alt_PointLayout(struct alt_PointPaddedLayout* from);

CAPI void alt_PointPaddedLayout_Create(struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_CAPI_Heap();

CAPI void alt_PointPaddedLayout_Create_1(float _x, float _y, float _z, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_1_CAPI_Heap(float _x, float _y, float _z);

CAPI void alt_PointPaddedLayout_Create_2(float* elements, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_2_CAPI_Heap(float* elements);

CAPI float* alt_PointPaddedLayout_Access_size_t(struct alt_PointPaddedLayout* _instance, unsigned long long key);

CAPI float* alt_PointPaddedLayout_Access_size_t_1(struct alt_PointPaddedLayout* _instance, unsigned long long key);

CAPI void alt_PointPaddedLayout_Create_3(struct alt_PointLayout* _p0, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_3_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_PointPaddedLayout_Create_4(struct alt_PointLayout* _p0, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_4_CAPI_Heap(struct alt_PointLayout* _p0);

CAPI void alt_PointPaddedLayout_Assign_constPointLayoutRef(struct alt_PointPaddedLayout* _instance, struct alt_PointLayout* _p0);

CAPI void alt_PointPaddedLayout_Assign_PointLayoutRefRef(struct alt_PointPaddedLayout* _instance, struct alt_PointLayout* _p0);


CAPI void alt_PointPaddedLayout_Create_5(struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_5_CAPI_Heap();

CAPI void alt_PointPaddedLayout_Create_6(float x, float y, float z, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_6_CAPI_Heap(float x, float y, float z);

CAPI void alt_PointPaddedLayout_Create_7(float* elements, struct alt_PointPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_PointPaddedLayout_CAPI_Free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_7_CAPI_Heap(float* elements);


typedef struct alt_RotationLayout {
    float roll;
    float pitch;
    float yaw;
} alt_RotationLayout;

CAPI void alt_RotationLayout_CAPI_Free(struct alt_RotationLayout* ptr);

CAPI void alt_RotationLayout_Create(float _roll, float _pitch, float _yaw, struct alt_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationLayout_CAPI_Free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_CAPI_Heap(float _roll, float _pitch, float _yaw);

CAPI void alt_RotationLayout_Create_1(struct alt_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationLayout_CAPI_Free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_1_CAPI_Heap();

CAPI void alt_RotationLayout_Create_2(float* elements, struct alt_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationLayout_CAPI_Free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_2_CAPI_Heap(float* elements);

CAPI float* alt_RotationLayout_Access_size_t(struct alt_RotationLayout* _instance, unsigned long long key);

CAPI float* alt_RotationLayout_Access_size_t_1(struct alt_RotationLayout* _instance, unsigned long long key);

CAPI void alt_RotationLayout_Normalize(struct alt_RotationLayout* _instance);

CAPI void alt_RotationLayout_Create_3(struct alt_RotationLayout* _p0, struct alt_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationLayout_CAPI_Free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_3_CAPI_Heap(struct alt_RotationLayout* _p0);

CAPI void alt_RotationLayout_Create_4(struct alt_RotationLayout* _p0, struct alt_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationLayout_CAPI_Free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_4_CAPI_Heap(struct alt_RotationLayout* _p0);


typedef struct alt_RotationPaddedLayout {
    float roll;
    float pitch;
    float yaw;
    float pad;
} alt_RotationPaddedLayout;

CAPI void alt_RotationPaddedLayout_CAPI_Free(struct alt_RotationPaddedLayout* ptr);

CAPI struct alt_RotationPaddedLayout* alt_RotationLayout_to_alt_RotationPaddedLayout(struct alt_RotationLayout* from);

CAPI struct alt_RotationLayout* alt_RotationPaddedLayout_to_alt_RotationLayout(struct alt_RotationPaddedLayout* from);

CAPI void alt_RotationPaddedLayout_Create(float _roll, float _pitch, float _yaw, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_CAPI_Heap(float _roll, float _pitch, float _yaw);

CAPI void alt_RotationPaddedLayout_Create_1(struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_1_CAPI_Heap();

CAPI void alt_RotationPaddedLayout_Create_2(float* elements, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_2_CAPI_Heap(float* elements);

CAPI float* alt_RotationPaddedLayout_Access_size_t(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

CAPI float* alt_RotationPaddedLayout_Access_size_t_1(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

CAPI void alt_RotationPaddedLayout_Normalize(struct alt_RotationPaddedLayout* _instance);

CAPI void alt_RotationPaddedLayout_Create_3(struct alt_RotationLayout* _p0, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_3_CAPI_Heap(struct alt_RotationLayout* _p0);

CAPI void alt_RotationPaddedLayout_Create_4(struct alt_RotationLayout* _p0, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_4_CAPI_Heap(struct alt_RotationLayout* _p0);


CAPI void alt_RotationPaddedLayout_Create_5(struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_5_CAPI_Heap();

CAPI void alt_RotationPaddedLayout_Create_6(float roll, float pitch, float yaw, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_6_CAPI_Heap(float roll, float pitch, float yaw);

CAPI void alt_RotationPaddedLayout_Create_7(float* elements, struct alt_RotationPaddedLayout* _returnValue);

// Return ptr must be manually freed with alt_RotationPaddedLayout_CAPI_Free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_7_CAPI_Heap(float* elements);


typedef struct alt_ViewMatrixLayout {
    struct alt_Vector_float_4_VectorLayout_float_4 right;
    struct alt_Vector_float_4_VectorLayout_float_4 up;
    struct alt_Vector_float_4_VectorLayout_float_4 forward;
    struct alt_Vector_float_4_VectorLayout_float_4 pos;
} alt_ViewMatrixLayout;

CAPI void alt_ViewMatrixLayout_CAPI_Free(struct alt_ViewMatrixLayout* ptr);

CAPI void alt_ViewMatrixLayout_Create(struct alt_ViewMatrixLayout* _returnValue);

// Return ptr must be manually freed with alt_ViewMatrixLayout_CAPI_Free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_CAPI_Heap();

CAPI void alt_ViewMatrixLayout_Create_1(struct alt_Vector_float_4_VectorLayout_float_4* _rows, struct alt_ViewMatrixLayout* _returnValue);

// Return ptr must be manually freed with alt_ViewMatrixLayout_CAPI_Free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_1_CAPI_Heap(struct alt_Vector_float_4_VectorLayout_float_4* _rows);

CAPI void alt_ViewMatrixLayout_Create_2(struct alt_Vector_float_4_VectorLayout_float_4* row, struct alt_ViewMatrixLayout* _returnValue);

// Return ptr must be manually freed with alt_ViewMatrixLayout_CAPI_Free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_2_CAPI_Heap(struct alt_Vector_float_4_VectorLayout_float_4* row);

CAPI void alt_ViewMatrixLayout_Create_3(float* elements, struct alt_ViewMatrixLayout* _returnValue);

// Return ptr must be manually freed with alt_ViewMatrixLayout_CAPI_Free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_3_CAPI_Heap(float* elements);

CAPI void alt_ViewMatrixLayout_Create_4(struct alt_Vector_float_4_VectorLayout_float_4* _right, struct alt_Vector_float_4_VectorLayout_float_4* _up, struct alt_Vector_float_4_VectorLayout_float_4* _forward, struct alt_Vector_float_4_VectorLayout_float_4* _pos, struct alt_ViewMatrixLayout* _returnValue);

// Return ptr must be manually freed with alt_ViewMatrixLayout_CAPI_Free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_4_CAPI_Heap(struct alt_Vector_float_4_VectorLayout_float_4* _right, struct alt_Vector_float_4_VectorLayout_float_4* _up, struct alt_Vector_float_4_VectorLayout_float_4* _forward, struct alt_Vector_float_4_VectorLayout_float_4* _pos);

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t(struct alt_ViewMatrixLayout* _instance, unsigned long long key);

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t_1(struct alt_ViewMatrixLayout* _instance, unsigned long long key);


typedef struct alt_String {
    char* data;
    unsigned long long size;
} alt_String;

CAPI void alt_String_CAPI_Free(struct alt_String* ptr);

CAPI void alt_String_Create(unsigned long long _size, char fill, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_CAPI_Heap(unsigned long long _size, char fill);

CAPI void alt_String_Create_1(char* _data, unsigned long long size, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_1_CAPI_Heap(char* _data, unsigned long long size);

CAPI void alt_String_Create_2(struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_2_CAPI_Heap();

CAPI void alt_String_Create_3(char* _str, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_3_CAPI_Heap(char* _str);

CAPI void alt_String_Create_5(struct alt_String* that, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_5_CAPI_Heap(struct alt_String* that);

CAPI void alt_String_Create_6(struct alt_String* that, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_String_Create_6_CAPI_Heap(struct alt_String* that);

CAPI char* alt_String_Access_uint64_t(struct alt_String* _instance, unsigned long long key);

CAPI char alt_String_Access_uint64_t_1(struct alt_String* _instance, unsigned long long key);

CAPI void alt_String_Assign_constStringRef(struct alt_String* _instance, struct alt_String* that);

CAPI void alt_String_Assign_StringRefRef(struct alt_String* _instance, struct alt_String* that);

CAPI void alt_String_Resize(struct alt_String* _instance, unsigned long long new_size);

CAPI _Bool alt_String_IsEmpty(struct alt_String* _instance);

CAPI char* alt_String_GetData(struct alt_String* _instance);

CAPI char* alt_String_GetData_1(struct alt_String* _instance);

CAPI unsigned long long alt_String_GetSize(struct alt_String* _instance);

CAPI _Bool alt_String_Equals_String(struct alt_String* _instance, struct alt_String* that);

CAPI _Bool alt_String_NotEquals_String(struct alt_String* _instance, struct alt_String* that);

CAPI char* alt_String_CStr(struct alt_String* _instance);


typedef struct alt_StringView {
    char* data;
    unsigned long long size;
} alt_StringView;

CAPI void alt_StringView_CAPI_Free(struct alt_StringView* ptr);

CAPI void alt_StringView_Create(char* _data, unsigned long long _size, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_CAPI_Heap(char* _data, unsigned long long _size);

CAPI void alt_StringView_Create_1(struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_1_CAPI_Heap();

CAPI void alt_StringView_Create_2(char* _str, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_2_CAPI_Heap(char* _str);

CAPI void alt_StringView_Create_4(struct alt_String* _str, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_4_CAPI_Heap(struct alt_String* _str);

CAPI _Bool alt_StringView_IsEmpty(struct alt_StringView* _instance);

CAPI char* alt_StringView_GetData(struct alt_StringView* _instance);

CAPI unsigned long long alt_StringView_GetSize(struct alt_StringView* _instance);

CAPI char alt_StringView_Access_uint64_t(struct alt_StringView* _instance, unsigned long long key);

CAPI _Bool alt_StringView_Equals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

CAPI _Bool alt_StringView_NotEquals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

CAPI void alt_StringView_To_String(struct alt_StringView* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_StringView_To_String_CAPI_Heap(struct alt_StringView* _instance);

CAPI char* alt_StringView_CStr(struct alt_StringView* _instance);

CAPI void alt_StringView_Create_6(struct alt_StringView* _p0, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_6_CAPI_Heap(struct alt_StringView* _p0);

CAPI void alt_StringView_Create_7(struct alt_StringView* _p0, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_StringView_Create_7_CAPI_Heap(struct alt_StringView* _p0);

CAPI void alt_StringView_Assign_constStringViewRef(struct alt_StringView* _instance, struct alt_StringView* _p0);

CAPI void alt_StringView_Assign_StringViewRefRef(struct alt_StringView* _instance, struct alt_StringView* _p0);


typedef struct alt_RGBA {
    unsigned char r;
    unsigned char g;
    unsigned char b;
    unsigned char a;
} alt_RGBA;

CAPI void alt_RGBA_CAPI_Free(struct alt_RGBA* ptr);

CAPI void alt_RGBA_Create(struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_RGBA_Create_CAPI_Heap();

CAPI void alt_RGBA_Create_1(unsigned char _r, unsigned char _g, unsigned char _b, unsigned char _a, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_RGBA_Create_1_CAPI_Heap(unsigned char _r, unsigned char _g, unsigned char _b, unsigned char _a);


typedef struct alt_Array_RefBase_RefStore_constIMValue {
    struct alt_RefBase_RefStore_constIMValue* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_RefBase_RefStore_constIMValue;

CAPI void alt_Array_RefBase_RefStore_constIMValue_CAPI_Free(struct alt_Array_RefBase_RefStore_constIMValue* ptr);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Create(struct alt_Array_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_CAPI_Heap();

CAPI void alt_Array_RefBase_RefStore_constIMValue_Create_1(struct alt_RefBase_RefStore_constIMValue* _data, unsigned long long _size, struct alt_Array_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_1_CAPI_Heap(struct alt_RefBase_RefStore_constIMValue* _data, unsigned long long _size);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Create_2(unsigned long long _size, struct alt_RefBase_RefStore_constIMValue* fill, struct alt_Array_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_2_CAPI_Heap(unsigned long long _size, struct alt_RefBase_RefStore_constIMValue* fill);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Create_3(struct alt_Array_RefBase_RefStore_constIMValue* that, struct alt_Array_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_3_CAPI_Heap(struct alt_Array_RefBase_RefStore_constIMValue* that);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Create_4(struct alt_Array_RefBase_RefStore_constIMValue* that, struct alt_Array_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_4_CAPI_Heap(struct alt_Array_RefBase_RefStore_constIMValue* that);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Assign_constArray_RefBase_RefStore_constIMValueRef(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_Array_RefBase_RefStore_constIMValue* that);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Assign_Array_RefBase_RefStore_constIMValueRefRef(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_Array_RefBase_RefStore_constIMValue* that);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Push(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_RefBase_RefStore_constIMValue* el);

CAPI void alt_Array_RefBase_RefStore_constIMValue_Reserve(struct alt_Array_RefBase_RefStore_constIMValue* _instance, unsigned long long size);

CAPI unsigned long long alt_Array_RefBase_RefStore_constIMValue_GetSize(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

CAPI unsigned long long alt_Array_RefBase_RefStore_constIMValue_GetCapacity(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t(struct alt_Array_RefBase_RefStore_constIMValue* _instance, unsigned long long key);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance, unsigned long long key);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_begin(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_begin_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_end(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_end_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance);


typedef struct alt_Array_StringView {
    struct alt_StringView* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_StringView;

CAPI void alt_Array_StringView_CAPI_Free(struct alt_Array_StringView* ptr);

CAPI void alt_Array_StringView_Create(struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with alt_Array_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_CAPI_Heap();

CAPI void alt_Array_StringView_Create_1(struct alt_StringView* _data, unsigned long long _size, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with alt_Array_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_1_CAPI_Heap(struct alt_StringView* _data, unsigned long long _size);

CAPI void alt_Array_StringView_Create_2(unsigned long long _size, struct alt_StringView* fill, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with alt_Array_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_2_CAPI_Heap(unsigned long long _size, struct alt_StringView* fill);

CAPI void alt_Array_StringView_Create_3(struct alt_Array_StringView* that, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with alt_Array_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_3_CAPI_Heap(struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Create_4(struct alt_Array_StringView* that, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with alt_Array_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_4_CAPI_Heap(struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Assign_constArray_StringViewRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Assign_Array_StringViewRefRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

CAPI void alt_Array_StringView_Push(struct alt_Array_StringView* _instance, struct alt_StringView* el);

CAPI void alt_Array_StringView_Reserve(struct alt_Array_StringView* _instance, unsigned long long size);

CAPI unsigned long long alt_Array_StringView_GetSize(struct alt_Array_StringView* _instance);

CAPI unsigned long long alt_Array_StringView_GetCapacity(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t(struct alt_Array_StringView* _instance, unsigned long long key);

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t_1(struct alt_Array_StringView* _instance, unsigned long long key);

CAPI struct alt_StringView* alt_Array_StringView_begin(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_begin_1(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_end(struct alt_Array_StringView* _instance);

CAPI struct alt_StringView* alt_Array_StringView_end_1(struct alt_Array_StringView* _instance);


typedef struct alt_Array_String {
    struct alt_String* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_String;

CAPI void alt_Array_String_CAPI_Free(struct alt_Array_String* ptr);

CAPI void alt_Array_String_Create(struct alt_Array_String* _returnValue);

// Return ptr must be manually freed with alt_Array_String_CAPI_Free()
CAPI struct alt_Array_String* alt_Array_String_Create_CAPI_Heap();

CAPI void alt_Array_String_Create_1(struct alt_String* _data, unsigned long long _size, struct alt_Array_String* _returnValue);

// Return ptr must be manually freed with alt_Array_String_CAPI_Free()
CAPI struct alt_Array_String* alt_Array_String_Create_1_CAPI_Heap(struct alt_String* _data, unsigned long long _size);

CAPI void alt_Array_String_Create_2(unsigned long long _size, struct alt_String* fill, struct alt_Array_String* _returnValue);

// Return ptr must be manually freed with alt_Array_String_CAPI_Free()
CAPI struct alt_Array_String* alt_Array_String_Create_2_CAPI_Heap(unsigned long long _size, struct alt_String* fill);

CAPI void alt_Array_String_Create_3(struct alt_Array_String* that, struct alt_Array_String* _returnValue);

// Return ptr must be manually freed with alt_Array_String_CAPI_Free()
CAPI struct alt_Array_String* alt_Array_String_Create_3_CAPI_Heap(struct alt_Array_String* that);

CAPI void alt_Array_String_Create_4(struct alt_Array_String* that, struct alt_Array_String* _returnValue);

// Return ptr must be manually freed with alt_Array_String_CAPI_Free()
CAPI struct alt_Array_String* alt_Array_String_Create_4_CAPI_Heap(struct alt_Array_String* that);

CAPI void alt_Array_String_Assign_constArray_StringRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

CAPI void alt_Array_String_Assign_Array_StringRefRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

CAPI void alt_Array_String_Push(struct alt_Array_String* _instance, struct alt_String* el);

CAPI void alt_Array_String_Reserve(struct alt_Array_String* _instance, unsigned long long size);

CAPI unsigned long long alt_Array_String_GetSize(struct alt_Array_String* _instance);

CAPI unsigned long long alt_Array_String_GetCapacity(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_Access_uint64_t(struct alt_Array_String* _instance, unsigned long long key);

CAPI struct alt_String* alt_Array_String_Access_uint64_t_1(struct alt_Array_String* _instance, unsigned long long key);

CAPI struct alt_String* alt_Array_String_begin(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_begin_1(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_end(struct alt_Array_String* _instance);

CAPI struct alt_String* alt_Array_String_end_1(struct alt_Array_String* _instance);


typedef struct alt_IWeakRef {
    void* vtable;
} alt_IWeakRef;

CAPI void alt_IWeakRef_CAPI_Free(struct alt_IWeakRef* ptr);

CAPI void alt_IWeakRef_OnDestroy(struct alt_IWeakRef* _instance);

CAPI void alt_IWeakRef_Assign_constIWeakRefRef(struct alt_IWeakRef* _instance, struct alt_IWeakRef* _p0);

CAPI void alt_IWeakRef_Assign_IWeakRefRefRef(struct alt_IWeakRef* _instance, struct alt_IWeakRef* _p0);


CAPI unsigned long long alt_CRefCountable_GetRefCount(struct alt_CRefCountable* _instance);

CAPI void alt_CRefCountable_AddRef(struct alt_CRefCountable* _instance);

CAPI void alt_CRefCountable_RemoveRef(struct alt_CRefCountable* _instance);

CAPI void alt_CRefCountable_AddWeakRef(struct alt_CRefCountable* _instance, struct alt_IWeakRef* ref);

CAPI void alt_CRefCountable_RemoveWeakRef(struct alt_CRefCountable* _instance, struct alt_IWeakRef* ref);


typedef struct alt_RefBase_RefStore_constIMValue {
    struct alt_IMValue* ptr;
} alt_RefBase_RefStore_constIMValue;

CAPI void alt_RefBase_RefStore_constIMValue_CAPI_Free(struct alt_RefBase_RefStore_constIMValue* ptr);

CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefStore_constIMValue_to_alt_RefBase_RefStore_constIMValue(struct alt_RefStore_constIMValue* from);

CAPI struct alt_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_to_alt_RefStore_constIMValue(struct alt_RefBase_RefStore_constIMValue* from);

CAPI void alt_RefBase_RefStore_constIMValue_Assign(struct alt_RefBase_RefStore_constIMValue* _instance, struct alt_IMValue* _ptr);

CAPI void alt_RefBase_RefStore_constIMValue_Free(struct alt_RefBase_RefStore_constIMValue* _instance);

CAPI struct alt_IMValue* alt_RefBase_RefStore_constIMValue_Get(struct alt_RefBase_RefStore_constIMValue* _instance);

CAPI void alt_RefBase_RefStore_constIMValue_Create(struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_CAPI_Heap();

CAPI void alt_RefBase_RefStore_constIMValue_Create_1(struct alt_RefStore_constIMValue* _p0, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_1_CAPI_Heap(struct alt_RefStore_constIMValue* _p0);

CAPI void alt_RefBase_RefStore_constIMValue_Create_2(struct alt_RefStore_constIMValue* _p0, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_2_CAPI_Heap(struct alt_RefStore_constIMValue* _p0);


CAPI void alt_RefBase_RefStore_constIMValue_Create_3(struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_3_CAPI_Heap();

CAPI void alt_RefBase_RefStore_constIMValue_Create_4(struct alt_IMValue* _ptr, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_4_CAPI_Heap(struct alt_IMValue* _ptr);

CAPI void alt_RefBase_RefStore_constIMValue_Create_5(struct alt_RefBase_RefStore_constIMValue* other, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_5_CAPI_Heap(struct alt_RefBase_RefStore_constIMValue* other);

CAPI void alt_RefBase_RefStore_constIMValue_Create_6(struct alt_RefBase_RefStore_constIMValue* other, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_6_CAPI_Heap(struct alt_RefBase_RefStore_constIMValue* other);

CAPI void alt_RefBase_RefStore_constIMValue_Create_7(nullptr_t _p0, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_7_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_constIMValue_Assign_constRefBase_RefStore_constIMValueRef(struct alt_RefBase_RefStore_constIMValue* _instance, struct alt_RefBase_RefStore_constIMValue* that);

CAPI _Bool alt_RefBase_RefStore_constIMValue_IsEmpty(struct alt_RefBase_RefStore_constIMValue* _instance);

CAPI _Bool alt_RefBase_RefStore_constIMValue_To__Bool(struct alt_RefBase_RefStore_constIMValue* _instance);


typedef struct alt_RefBase_RefStore_IBaseObject {
    struct alt_IBaseObject* ptr;
} alt_RefBase_RefStore_IBaseObject;

CAPI void alt_RefBase_RefStore_IBaseObject_CAPI_Free(struct alt_RefBase_RefStore_IBaseObject* ptr);

CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefStore_IBaseObject_to_alt_RefBase_RefStore_IBaseObject(struct alt_RefStore_IBaseObject* from);

CAPI struct alt_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_to_alt_RefStore_IBaseObject(struct alt_RefBase_RefStore_IBaseObject* from);

CAPI void alt_RefBase_RefStore_IBaseObject_Assign(struct alt_RefBase_RefStore_IBaseObject* _instance, struct alt_IBaseObject* _ptr);

CAPI void alt_RefBase_RefStore_IBaseObject_Free(struct alt_RefBase_RefStore_IBaseObject* _instance);

CAPI struct alt_IBaseObject* alt_RefBase_RefStore_IBaseObject_Get(struct alt_RefBase_RefStore_IBaseObject* _instance);

CAPI void alt_RefBase_RefStore_IBaseObject_Create(struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_CAPI_Heap();


CAPI void alt_RefBase_RefStore_IBaseObject_Create_1(struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_1_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IBaseObject_Create_2(struct alt_IBaseObject* _ptr, struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_2_CAPI_Heap(struct alt_IBaseObject* _ptr);

CAPI void alt_RefBase_RefStore_IBaseObject_Create_3(struct alt_RefBase_RefStore_IBaseObject* other, struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_3_CAPI_Heap(struct alt_RefBase_RefStore_IBaseObject* other);

CAPI void alt_RefBase_RefStore_IBaseObject_Create_4(struct alt_RefBase_RefStore_IBaseObject* other, struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_4_CAPI_Heap(struct alt_RefBase_RefStore_IBaseObject* other);

CAPI void alt_RefBase_RefStore_IBaseObject_Create_5(nullptr_t _p0, struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_5_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_IBaseObject_Assign_constRefBase_RefStore_IBaseObjectRef(struct alt_RefBase_RefStore_IBaseObject* _instance, struct alt_RefBase_RefStore_IBaseObject* that);

CAPI _Bool alt_RefBase_RefStore_IBaseObject_IsEmpty(struct alt_RefBase_RefStore_IBaseObject* _instance);

CAPI _Bool alt_RefBase_RefStore_IBaseObject_To__Bool(struct alt_RefBase_RefStore_IBaseObject* _instance);


typedef struct alt_RefBase_RefStore_IPlayer {
    struct alt_IPlayer* ptr;
} alt_RefBase_RefStore_IPlayer;

CAPI void alt_RefBase_RefStore_IPlayer_CAPI_Free(struct alt_RefBase_RefStore_IPlayer* ptr);

CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefStore_IPlayer_to_alt_RefBase_RefStore_IPlayer(struct alt_RefStore_IPlayer* from);

CAPI struct alt_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_to_alt_RefStore_IPlayer(struct alt_RefBase_RefStore_IPlayer* from);

CAPI void alt_RefBase_RefStore_IPlayer_Assign(struct alt_RefBase_RefStore_IPlayer* _instance, struct alt_IPlayer* _ptr);

CAPI void alt_RefBase_RefStore_IPlayer_Free(struct alt_RefBase_RefStore_IPlayer* _instance);

CAPI struct alt_IPlayer* alt_RefBase_RefStore_IPlayer_Get(struct alt_RefBase_RefStore_IPlayer* _instance);

CAPI void alt_RefBase_RefStore_IPlayer_Create(struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IPlayer_Create_1(struct alt_RefStore_IPlayer* _p0, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_1_CAPI_Heap(struct alt_RefStore_IPlayer* _p0);

CAPI void alt_RefBase_RefStore_IPlayer_Create_2(struct alt_RefStore_IPlayer* _p0, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_2_CAPI_Heap(struct alt_RefStore_IPlayer* _p0);


CAPI void alt_RefBase_RefStore_IPlayer_Create_3(struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_3_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IPlayer_Create_4(struct alt_IPlayer* _ptr, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_4_CAPI_Heap(struct alt_IPlayer* _ptr);

CAPI void alt_RefBase_RefStore_IPlayer_Create_5(struct alt_RefBase_RefStore_IPlayer* other, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_5_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* other);

CAPI void alt_RefBase_RefStore_IPlayer_Create_6(struct alt_RefBase_RefStore_IPlayer* other, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_6_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* other);

CAPI void alt_RefBase_RefStore_IPlayer_Create_7(nullptr_t _p0, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_7_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_IPlayer_Assign_constRefBase_RefStore_IPlayerRef(struct alt_RefBase_RefStore_IPlayer* _instance, struct alt_RefBase_RefStore_IPlayer* that);

CAPI _Bool alt_RefBase_RefStore_IPlayer_IsEmpty(struct alt_RefBase_RefStore_IPlayer* _instance);

CAPI _Bool alt_RefBase_RefStore_IPlayer_To__Bool(struct alt_RefBase_RefStore_IPlayer* _instance);


typedef struct alt_RefBase_RefStore_IVehicle {
    struct alt_IVehicle* ptr;
} alt_RefBase_RefStore_IVehicle;

CAPI void alt_RefBase_RefStore_IVehicle_CAPI_Free(struct alt_RefBase_RefStore_IVehicle* ptr);

CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefStore_IVehicle_to_alt_RefBase_RefStore_IVehicle(struct alt_RefStore_IVehicle* from);

CAPI struct alt_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_to_alt_RefStore_IVehicle(struct alt_RefBase_RefStore_IVehicle* from);

CAPI void alt_RefBase_RefStore_IVehicle_Assign(struct alt_RefBase_RefStore_IVehicle* _instance, struct alt_IVehicle* _ptr);

CAPI void alt_RefBase_RefStore_IVehicle_Free(struct alt_RefBase_RefStore_IVehicle* _instance);

CAPI struct alt_IVehicle* alt_RefBase_RefStore_IVehicle_Get(struct alt_RefBase_RefStore_IVehicle* _instance);

CAPI void alt_RefBase_RefStore_IVehicle_Create(struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IVehicle_Create_1(struct alt_RefStore_IVehicle* _p0, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_1_CAPI_Heap(struct alt_RefStore_IVehicle* _p0);

CAPI void alt_RefBase_RefStore_IVehicle_Create_2(struct alt_RefStore_IVehicle* _p0, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_2_CAPI_Heap(struct alt_RefStore_IVehicle* _p0);


CAPI void alt_RefBase_RefStore_IVehicle_Create_3(struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_3_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IVehicle_Create_4(struct alt_IVehicle* _ptr, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_4_CAPI_Heap(struct alt_IVehicle* _ptr);

CAPI void alt_RefBase_RefStore_IVehicle_Create_5(struct alt_RefBase_RefStore_IVehicle* other, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_5_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* other);

CAPI void alt_RefBase_RefStore_IVehicle_Create_6(struct alt_RefBase_RefStore_IVehicle* other, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_6_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* other);

CAPI void alt_RefBase_RefStore_IVehicle_Create_7(nullptr_t _p0, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_7_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_IVehicle_Assign_constRefBase_RefStore_IVehicleRef(struct alt_RefBase_RefStore_IVehicle* _instance, struct alt_RefBase_RefStore_IVehicle* that);

CAPI _Bool alt_RefBase_RefStore_IVehicle_IsEmpty(struct alt_RefBase_RefStore_IVehicle* _instance);

CAPI _Bool alt_RefBase_RefStore_IVehicle_To__Bool(struct alt_RefBase_RefStore_IVehicle* _instance);


typedef struct alt_RefBase_RefStore_IEntity {
    struct alt_IEntity* ptr;
} alt_RefBase_RefStore_IEntity;

CAPI void alt_RefBase_RefStore_IEntity_CAPI_Free(struct alt_RefBase_RefStore_IEntity* ptr);

CAPI struct alt_RefBase_RefStore_IEntity* alt_RefStore_IEntity_to_alt_RefBase_RefStore_IEntity(struct alt_RefStore_IEntity* from);

CAPI struct alt_RefStore_IEntity* alt_RefBase_RefStore_IEntity_to_alt_RefStore_IEntity(struct alt_RefBase_RefStore_IEntity* from);

CAPI void alt_RefBase_RefStore_IEntity_Assign(struct alt_RefBase_RefStore_IEntity* _instance, struct alt_IEntity* _ptr);

CAPI void alt_RefBase_RefStore_IEntity_Free(struct alt_RefBase_RefStore_IEntity* _instance);

CAPI struct alt_IEntity* alt_RefBase_RefStore_IEntity_Get(struct alt_RefBase_RefStore_IEntity* _instance);

CAPI void alt_RefBase_RefStore_IEntity_Create(struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IEntity_Create_1(struct alt_RefStore_IEntity* _p0, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_1_CAPI_Heap(struct alt_RefStore_IEntity* _p0);

CAPI void alt_RefBase_RefStore_IEntity_Create_2(struct alt_RefStore_IEntity* _p0, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_2_CAPI_Heap(struct alt_RefStore_IEntity* _p0);


CAPI void alt_RefBase_RefStore_IEntity_Create_3(struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_3_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IEntity_Create_4(struct alt_IEntity* _ptr, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_4_CAPI_Heap(struct alt_IEntity* _ptr);

CAPI void alt_RefBase_RefStore_IEntity_Create_5(struct alt_RefBase_RefStore_IEntity* other, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_5_CAPI_Heap(struct alt_RefBase_RefStore_IEntity* other);

CAPI void alt_RefBase_RefStore_IEntity_Create_6(struct alt_RefBase_RefStore_IEntity* other, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_6_CAPI_Heap(struct alt_RefBase_RefStore_IEntity* other);

CAPI void alt_RefBase_RefStore_IEntity_Create_7(nullptr_t _p0, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_7_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_IEntity_Assign_constRefBase_RefStore_IEntityRef(struct alt_RefBase_RefStore_IEntity* _instance, struct alt_RefBase_RefStore_IEntity* that);

CAPI _Bool alt_RefBase_RefStore_IEntity_IsEmpty(struct alt_RefBase_RefStore_IEntity* _instance);

CAPI _Bool alt_RefBase_RefStore_IEntity_To__Bool(struct alt_RefBase_RefStore_IEntity* _instance);


typedef struct alt_RefBase_RefStore_IColShape {
    struct alt_IColShape* ptr;
} alt_RefBase_RefStore_IColShape;

CAPI void alt_RefBase_RefStore_IColShape_CAPI_Free(struct alt_RefBase_RefStore_IColShape* ptr);

CAPI struct alt_RefBase_RefStore_IColShape* alt_RefStore_IColShape_to_alt_RefBase_RefStore_IColShape(struct alt_RefStore_IColShape* from);

CAPI struct alt_RefStore_IColShape* alt_RefBase_RefStore_IColShape_to_alt_RefStore_IColShape(struct alt_RefBase_RefStore_IColShape* from);

CAPI void alt_RefBase_RefStore_IColShape_Assign(struct alt_RefBase_RefStore_IColShape* _instance, struct alt_IColShape* _ptr);

CAPI void alt_RefBase_RefStore_IColShape_Free(struct alt_RefBase_RefStore_IColShape* _instance);

CAPI struct alt_IColShape* alt_RefBase_RefStore_IColShape_Get(struct alt_RefBase_RefStore_IColShape* _instance);

CAPI void alt_RefBase_RefStore_IColShape_Create(struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IColShape_Create_1(struct alt_RefStore_IColShape* _p0, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_1_CAPI_Heap(struct alt_RefStore_IColShape* _p0);

CAPI void alt_RefBase_RefStore_IColShape_Create_2(struct alt_RefStore_IColShape* _p0, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_2_CAPI_Heap(struct alt_RefStore_IColShape* _p0);


CAPI void alt_RefBase_RefStore_IColShape_Create_3(struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_3_CAPI_Heap();

CAPI void alt_RefBase_RefStore_IColShape_Create_4(struct alt_IColShape* _ptr, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_4_CAPI_Heap(struct alt_IColShape* _ptr);

CAPI void alt_RefBase_RefStore_IColShape_Create_5(struct alt_RefBase_RefStore_IColShape* other, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_5_CAPI_Heap(struct alt_RefBase_RefStore_IColShape* other);

CAPI void alt_RefBase_RefStore_IColShape_Create_6(struct alt_RefBase_RefStore_IColShape* other, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_6_CAPI_Heap(struct alt_RefBase_RefStore_IColShape* other);

CAPI void alt_RefBase_RefStore_IColShape_Create_7(nullptr_t _p0, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_7_CAPI_Heap(nullptr_t _p0);

CAPI void alt_RefBase_RefStore_IColShape_Assign_constRefBase_RefStore_IColShapeRef(struct alt_RefBase_RefStore_IColShape* _instance, struct alt_RefBase_RefStore_IColShape* that);

CAPI _Bool alt_RefBase_RefStore_IColShape_IsEmpty(struct alt_RefBase_RefStore_IColShape* _instance);

CAPI _Bool alt_RefBase_RefStore_IColShape_To__Bool(struct alt_RefBase_RefStore_IColShape* _instance);


typedef struct alt_RefStore_constIMValue {
    struct alt_IMValue* ptr;
} alt_RefStore_constIMValue;

CAPI void alt_RefStore_constIMValue_CAPI_Free(struct alt_RefStore_constIMValue* ptr);

CAPI void alt_RefStore_constIMValue_Assign(struct alt_RefStore_constIMValue* _instance, struct alt_IMValue* _ptr);

CAPI void alt_RefStore_constIMValue_Free(struct alt_RefStore_constIMValue* _instance);

CAPI struct alt_IMValue* alt_RefStore_constIMValue_Get(struct alt_RefStore_constIMValue* _instance);

CAPI void alt_RefStore_constIMValue_Create(struct alt_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create_CAPI_Heap();

CAPI void alt_RefStore_constIMValue_Create_1(struct alt_RefStore_constIMValue* _p0, struct alt_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create_1_CAPI_Heap(struct alt_RefStore_constIMValue* _p0);

CAPI void alt_RefStore_constIMValue_Create_2(struct alt_RefStore_constIMValue* _p0, struct alt_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create_2_CAPI_Heap(struct alt_RefStore_constIMValue* _p0);


typedef struct alt_RefStore_IBaseObject {
    struct alt_IBaseObject* ptr;
} alt_RefStore_IBaseObject;

CAPI void alt_RefStore_IBaseObject_CAPI_Free(struct alt_RefStore_IBaseObject* ptr);

CAPI void alt_RefStore_IBaseObject_Assign(struct alt_RefStore_IBaseObject* _instance, struct alt_IBaseObject* _ptr);

CAPI void alt_RefStore_IBaseObject_Free(struct alt_RefStore_IBaseObject* _instance);

CAPI struct alt_IBaseObject* alt_RefStore_IBaseObject_Get(struct alt_RefStore_IBaseObject* _instance);

CAPI void alt_RefStore_IBaseObject_Create(struct alt_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefStore_IBaseObject* alt_RefStore_IBaseObject_Create_CAPI_Heap();


typedef struct alt_RefStore_IPlayer {
    struct alt_IPlayer* ptr;
} alt_RefStore_IPlayer;

CAPI void alt_RefStore_IPlayer_CAPI_Free(struct alt_RefStore_IPlayer* ptr);

CAPI void alt_RefStore_IPlayer_Assign(struct alt_RefStore_IPlayer* _instance, struct alt_IPlayer* _ptr);

CAPI void alt_RefStore_IPlayer_Free(struct alt_RefStore_IPlayer* _instance);

CAPI struct alt_IPlayer* alt_RefStore_IPlayer_Get(struct alt_RefStore_IPlayer* _instance);

CAPI void alt_RefStore_IPlayer_Create(struct alt_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create_CAPI_Heap();

CAPI void alt_RefStore_IPlayer_Create_1(struct alt_RefStore_IPlayer* _p0, struct alt_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create_1_CAPI_Heap(struct alt_RefStore_IPlayer* _p0);

CAPI void alt_RefStore_IPlayer_Create_2(struct alt_RefStore_IPlayer* _p0, struct alt_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create_2_CAPI_Heap(struct alt_RefStore_IPlayer* _p0);


typedef struct alt_RefStore_IVehicle {
    struct alt_IVehicle* ptr;
} alt_RefStore_IVehicle;

CAPI void alt_RefStore_IVehicle_CAPI_Free(struct alt_RefStore_IVehicle* ptr);

CAPI void alt_RefStore_IVehicle_Assign(struct alt_RefStore_IVehicle* _instance, struct alt_IVehicle* _ptr);

CAPI void alt_RefStore_IVehicle_Free(struct alt_RefStore_IVehicle* _instance);

CAPI struct alt_IVehicle* alt_RefStore_IVehicle_Get(struct alt_RefStore_IVehicle* _instance);

CAPI void alt_RefStore_IVehicle_Create(struct alt_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create_CAPI_Heap();

CAPI void alt_RefStore_IVehicle_Create_1(struct alt_RefStore_IVehicle* _p0, struct alt_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create_1_CAPI_Heap(struct alt_RefStore_IVehicle* _p0);

CAPI void alt_RefStore_IVehicle_Create_2(struct alt_RefStore_IVehicle* _p0, struct alt_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create_2_CAPI_Heap(struct alt_RefStore_IVehicle* _p0);


typedef struct alt_RefStore_IEntity {
    struct alt_IEntity* ptr;
} alt_RefStore_IEntity;

CAPI void alt_RefStore_IEntity_CAPI_Free(struct alt_RefStore_IEntity* ptr);

CAPI void alt_RefStore_IEntity_Assign(struct alt_RefStore_IEntity* _instance, struct alt_IEntity* _ptr);

CAPI void alt_RefStore_IEntity_Free(struct alt_RefStore_IEntity* _instance);

CAPI struct alt_IEntity* alt_RefStore_IEntity_Get(struct alt_RefStore_IEntity* _instance);

CAPI void alt_RefStore_IEntity_Create(struct alt_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create_CAPI_Heap();

CAPI void alt_RefStore_IEntity_Create_1(struct alt_RefStore_IEntity* _p0, struct alt_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create_1_CAPI_Heap(struct alt_RefStore_IEntity* _p0);

CAPI void alt_RefStore_IEntity_Create_2(struct alt_RefStore_IEntity* _p0, struct alt_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create_2_CAPI_Heap(struct alt_RefStore_IEntity* _p0);


typedef struct alt_RefStore_IColShape {
    struct alt_IColShape* ptr;
} alt_RefStore_IColShape;

CAPI void alt_RefStore_IColShape_CAPI_Free(struct alt_RefStore_IColShape* ptr);

CAPI void alt_RefStore_IColShape_Assign(struct alt_RefStore_IColShape* _instance, struct alt_IColShape* _ptr);

CAPI void alt_RefStore_IColShape_Free(struct alt_RefStore_IColShape* _instance);

CAPI struct alt_IColShape* alt_RefStore_IColShape_Get(struct alt_RefStore_IColShape* _instance);

CAPI void alt_RefStore_IColShape_Create(struct alt_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create_CAPI_Heap();

CAPI void alt_RefStore_IColShape_Create_1(struct alt_RefStore_IColShape* _p0, struct alt_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create_1_CAPI_Heap(struct alt_RefStore_IColShape* _p0);

CAPI void alt_RefStore_IColShape_Create_2(struct alt_RefStore_IColShape* _p0, struct alt_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create_2_CAPI_Heap(struct alt_RefStore_IColShape* _p0);


CAPI struct alt_IMValue* alt_CRefCountable_to_alt_IMValue(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValue_to_alt_CRefCountable(struct alt_IMValue* from);

CAPI unsigned long long alt_IMValue_GetRefCount(struct alt_IMValue* _instance);

CAPI void alt_IMValue_AddRef(struct alt_IMValue* _instance);

CAPI void alt_IMValue_RemoveRef(struct alt_IMValue* _instance);

CAPI void alt_IMValue_AddWeakRef(struct alt_IMValue* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValue_RemoveWeakRef(struct alt_IMValue* _instance, struct alt_IWeakRef* ref);


typedef enum alt_IMValue_Type {
    ALT_IMVALUE_TYPE_NONE = 0,
    ALT_IMVALUE_TYPE_NIL = 1,
    ALT_IMVALUE_TYPE_BOOL = 2,
    ALT_IMVALUE_TYPE_INT = 3,
    ALT_IMVALUE_TYPE_UINT = 4,
    ALT_IMVALUE_TYPE_DOUBLE = 5,
    ALT_IMVALUE_TYPE_STRING = 6,
    ALT_IMVALUE_TYPE_LIST = 7,
    ALT_IMVALUE_TYPE_DICT = 8,
    ALT_IMVALUE_TYPE_BASE_OBJECT = 9,
    ALT_IMVALUE_TYPE_FUNCTION = 10,
    ALT_IMVALUE_TYPE_VECTOR3 = 11,
    ALT_IMVALUE_TYPE_RGBA = 12,
    ALT_IMVALUE_TYPE_BYTE_ARRAY = 13
};

CAPI alt_IMValue_Type alt_IMValue_GetType(struct alt_IMValue* _instance);

CAPI void alt_IMValue_ToString(struct alt_IMValue* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValue_ToString_CAPI_Heap(struct alt_IMValue* _instance);

CAPI double alt_IMValue_ToNumber(struct alt_IMValue* _instance);

CAPI void alt_IMValue_Clone(struct alt_IMValue* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValue_Clone_CAPI_Heap(struct alt_IMValue* _instance);


CAPI void alt_IMValueNone_CAPI_Free(struct alt_IMValueNone* ptr);

CAPI struct alt_IMValueNone* alt_CRefCountable_to_alt_IMValueNone(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueNone_to_alt_CRefCountable(struct alt_IMValueNone* from);

CAPI unsigned long long alt_IMValueNone_GetRefCount(struct alt_IMValueNone* _instance);

CAPI void alt_IMValueNone_AddRef(struct alt_IMValueNone* _instance);

CAPI void alt_IMValueNone_RemoveRef(struct alt_IMValueNone* _instance);

CAPI void alt_IMValueNone_AddWeakRef(struct alt_IMValueNone* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueNone_RemoveWeakRef(struct alt_IMValueNone* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueNone* alt_IMValue_to_alt_IMValueNone(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueNone_to_alt_IMValue(struct alt_IMValueNone* from);

CAPI alt_IMValue_Type alt_IMValueNone_GetType(struct alt_IMValueNone* _instance);

CAPI void alt_IMValueNone_ToString(struct alt_IMValueNone* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueNone_ToString_CAPI_Heap(struct alt_IMValueNone* _instance);

CAPI double alt_IMValueNone_ToNumber(struct alt_IMValueNone* _instance);

CAPI void alt_IMValueNone_Clone(struct alt_IMValueNone* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueNone_Clone_CAPI_Heap(struct alt_IMValueNone* _instance);



CAPI void alt_IMValueNil_CAPI_Free(struct alt_IMValueNil* ptr);

CAPI struct alt_IMValueNil* alt_CRefCountable_to_alt_IMValueNil(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueNil_to_alt_CRefCountable(struct alt_IMValueNil* from);

CAPI unsigned long long alt_IMValueNil_GetRefCount(struct alt_IMValueNil* _instance);

CAPI void alt_IMValueNil_AddRef(struct alt_IMValueNil* _instance);

CAPI void alt_IMValueNil_RemoveRef(struct alt_IMValueNil* _instance);

CAPI void alt_IMValueNil_AddWeakRef(struct alt_IMValueNil* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueNil_RemoveWeakRef(struct alt_IMValueNil* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueNil* alt_IMValue_to_alt_IMValueNil(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueNil_to_alt_IMValue(struct alt_IMValueNil* from);

CAPI alt_IMValue_Type alt_IMValueNil_GetType(struct alt_IMValueNil* _instance);

CAPI void alt_IMValueNil_ToString(struct alt_IMValueNil* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueNil_ToString_CAPI_Heap(struct alt_IMValueNil* _instance);

CAPI double alt_IMValueNil_ToNumber(struct alt_IMValueNil* _instance);

CAPI void alt_IMValueNil_Clone(struct alt_IMValueNil* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueNil_Clone_CAPI_Heap(struct alt_IMValueNil* _instance);



CAPI void alt_IMValueBool_CAPI_Free(struct alt_IMValueBool* ptr);

CAPI struct alt_IMValueBool* alt_CRefCountable_to_alt_IMValueBool(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueBool_to_alt_CRefCountable(struct alt_IMValueBool* from);

CAPI unsigned long long alt_IMValueBool_GetRefCount(struct alt_IMValueBool* _instance);

CAPI void alt_IMValueBool_AddRef(struct alt_IMValueBool* _instance);

CAPI void alt_IMValueBool_RemoveRef(struct alt_IMValueBool* _instance);

CAPI void alt_IMValueBool_AddWeakRef(struct alt_IMValueBool* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueBool_RemoveWeakRef(struct alt_IMValueBool* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueBool* alt_IMValue_to_alt_IMValueBool(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueBool_to_alt_IMValue(struct alt_IMValueBool* from);

CAPI alt_IMValue_Type alt_IMValueBool_GetType(struct alt_IMValueBool* _instance);

CAPI void alt_IMValueBool_ToString(struct alt_IMValueBool* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueBool_ToString_CAPI_Heap(struct alt_IMValueBool* _instance);

CAPI double alt_IMValueBool_ToNumber(struct alt_IMValueBool* _instance);

CAPI void alt_IMValueBool_Clone(struct alt_IMValueBool* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueBool_Clone_CAPI_Heap(struct alt_IMValueBool* _instance);


CAPI _Bool alt_IMValueBool_Value(struct alt_IMValueBool* _instance);


CAPI void alt_IMValueInt_CAPI_Free(struct alt_IMValueInt* ptr);

CAPI struct alt_IMValueInt* alt_CRefCountable_to_alt_IMValueInt(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueInt_to_alt_CRefCountable(struct alt_IMValueInt* from);

CAPI unsigned long long alt_IMValueInt_GetRefCount(struct alt_IMValueInt* _instance);

CAPI void alt_IMValueInt_AddRef(struct alt_IMValueInt* _instance);

CAPI void alt_IMValueInt_RemoveRef(struct alt_IMValueInt* _instance);

CAPI void alt_IMValueInt_AddWeakRef(struct alt_IMValueInt* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueInt_RemoveWeakRef(struct alt_IMValueInt* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueInt* alt_IMValue_to_alt_IMValueInt(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueInt_to_alt_IMValue(struct alt_IMValueInt* from);

CAPI alt_IMValue_Type alt_IMValueInt_GetType(struct alt_IMValueInt* _instance);

CAPI void alt_IMValueInt_ToString(struct alt_IMValueInt* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueInt_ToString_CAPI_Heap(struct alt_IMValueInt* _instance);

CAPI double alt_IMValueInt_ToNumber(struct alt_IMValueInt* _instance);

CAPI void alt_IMValueInt_Clone(struct alt_IMValueInt* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueInt_Clone_CAPI_Heap(struct alt_IMValueInt* _instance);


CAPI long long alt_IMValueInt_Value(struct alt_IMValueInt* _instance);


CAPI void alt_IMValueUInt_CAPI_Free(struct alt_IMValueUInt* ptr);

CAPI struct alt_IMValueUInt* alt_CRefCountable_to_alt_IMValueUInt(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueUInt_to_alt_CRefCountable(struct alt_IMValueUInt* from);

CAPI unsigned long long alt_IMValueUInt_GetRefCount(struct alt_IMValueUInt* _instance);

CAPI void alt_IMValueUInt_AddRef(struct alt_IMValueUInt* _instance);

CAPI void alt_IMValueUInt_RemoveRef(struct alt_IMValueUInt* _instance);

CAPI void alt_IMValueUInt_AddWeakRef(struct alt_IMValueUInt* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueUInt_RemoveWeakRef(struct alt_IMValueUInt* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueUInt* alt_IMValue_to_alt_IMValueUInt(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueUInt_to_alt_IMValue(struct alt_IMValueUInt* from);

CAPI alt_IMValue_Type alt_IMValueUInt_GetType(struct alt_IMValueUInt* _instance);

CAPI void alt_IMValueUInt_ToString(struct alt_IMValueUInt* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueUInt_ToString_CAPI_Heap(struct alt_IMValueUInt* _instance);

CAPI double alt_IMValueUInt_ToNumber(struct alt_IMValueUInt* _instance);

CAPI void alt_IMValueUInt_Clone(struct alt_IMValueUInt* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueUInt_Clone_CAPI_Heap(struct alt_IMValueUInt* _instance);


CAPI unsigned long long alt_IMValueUInt_Value(struct alt_IMValueUInt* _instance);


CAPI void alt_IMValueDouble_CAPI_Free(struct alt_IMValueDouble* ptr);

CAPI struct alt_IMValueDouble* alt_CRefCountable_to_alt_IMValueDouble(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueDouble_to_alt_CRefCountable(struct alt_IMValueDouble* from);

CAPI unsigned long long alt_IMValueDouble_GetRefCount(struct alt_IMValueDouble* _instance);

CAPI void alt_IMValueDouble_AddRef(struct alt_IMValueDouble* _instance);

CAPI void alt_IMValueDouble_RemoveRef(struct alt_IMValueDouble* _instance);

CAPI void alt_IMValueDouble_AddWeakRef(struct alt_IMValueDouble* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueDouble_RemoveWeakRef(struct alt_IMValueDouble* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueDouble* alt_IMValue_to_alt_IMValueDouble(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueDouble_to_alt_IMValue(struct alt_IMValueDouble* from);

CAPI alt_IMValue_Type alt_IMValueDouble_GetType(struct alt_IMValueDouble* _instance);

CAPI void alt_IMValueDouble_ToString(struct alt_IMValueDouble* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueDouble_ToString_CAPI_Heap(struct alt_IMValueDouble* _instance);

CAPI double alt_IMValueDouble_ToNumber(struct alt_IMValueDouble* _instance);

CAPI void alt_IMValueDouble_Clone(struct alt_IMValueDouble* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDouble_Clone_CAPI_Heap(struct alt_IMValueDouble* _instance);


CAPI double alt_IMValueDouble_Value(struct alt_IMValueDouble* _instance);


CAPI void alt_IMValueString_CAPI_Free(struct alt_IMValueString* ptr);

CAPI struct alt_IMValueString* alt_CRefCountable_to_alt_IMValueString(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueString_to_alt_CRefCountable(struct alt_IMValueString* from);

CAPI unsigned long long alt_IMValueString_GetRefCount(struct alt_IMValueString* _instance);

CAPI void alt_IMValueString_AddRef(struct alt_IMValueString* _instance);

CAPI void alt_IMValueString_RemoveRef(struct alt_IMValueString* _instance);

CAPI void alt_IMValueString_AddWeakRef(struct alt_IMValueString* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueString_RemoveWeakRef(struct alt_IMValueString* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueString* alt_IMValue_to_alt_IMValueString(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueString_to_alt_IMValue(struct alt_IMValueString* from);

CAPI alt_IMValue_Type alt_IMValueString_GetType(struct alt_IMValueString* _instance);

CAPI void alt_IMValueString_ToString(struct alt_IMValueString* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueString_ToString_CAPI_Heap(struct alt_IMValueString* _instance);

CAPI double alt_IMValueString_ToNumber(struct alt_IMValueString* _instance);

CAPI void alt_IMValueString_Clone(struct alt_IMValueString* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueString_Clone_CAPI_Heap(struct alt_IMValueString* _instance);


CAPI void alt_IMValueString_Value(struct alt_IMValueString* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IMValueString_Value_CAPI_Heap(struct alt_IMValueString* _instance);


CAPI void alt_IMValueList_CAPI_Free(struct alt_IMValueList* ptr);

CAPI struct alt_IMValueList* alt_CRefCountable_to_alt_IMValueList(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueList_to_alt_CRefCountable(struct alt_IMValueList* from);

CAPI unsigned long long alt_IMValueList_GetRefCount(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_AddRef(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_RemoveRef(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_AddWeakRef(struct alt_IMValueList* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueList_RemoveWeakRef(struct alt_IMValueList* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueList* alt_IMValue_to_alt_IMValueList(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueList_to_alt_IMValue(struct alt_IMValueList* from);

CAPI alt_IMValue_Type alt_IMValueList_GetType(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_ToString(struct alt_IMValueList* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueList_ToString_CAPI_Heap(struct alt_IMValueList* _instance);

CAPI double alt_IMValueList_ToNumber(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_Clone(struct alt_IMValueList* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueList_Clone_CAPI_Heap(struct alt_IMValueList* _instance);


CAPI unsigned long long alt_IMValueList_GetSize(struct alt_IMValueList* _instance);

CAPI void alt_IMValueList_Get(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueList_Get_CAPI_Heap(struct alt_IMValueList* _instance, unsigned long long i);

CAPI void alt_IMValueList_Get_1(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueList_Get_1_CAPI_Heap(struct alt_IMValueList* _instance, unsigned long long i);

CAPI void alt_IMValueList_Set(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IMValueList_Push(struct alt_IMValueList* _instance, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IMValueList_SetConst(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_constIMValue* val);

CAPI void alt_IMValueList_PushConst(struct alt_IMValueList* _instance, struct alt_RefBase_RefStore_constIMValue* val);


CAPI void alt_IMValueDict_CAPI_Free(struct alt_IMValueDict* ptr);

CAPI struct alt_IMValueDict* alt_CRefCountable_to_alt_IMValueDict(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueDict_to_alt_CRefCountable(struct alt_IMValueDict* from);

CAPI unsigned long long alt_IMValueDict_GetRefCount(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_AddRef(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_RemoveRef(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_AddWeakRef(struct alt_IMValueDict* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueDict_RemoveWeakRef(struct alt_IMValueDict* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueDict* alt_IMValue_to_alt_IMValueDict(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueDict_to_alt_IMValue(struct alt_IMValueDict* from);

CAPI alt_IMValue_Type alt_IMValueDict_GetType(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_ToString(struct alt_IMValueDict* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueDict_ToString_CAPI_Heap(struct alt_IMValueDict* _instance);

CAPI double alt_IMValueDict_ToNumber(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_Clone(struct alt_IMValueDict* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDict_Clone_CAPI_Heap(struct alt_IMValueDict* _instance);


CAPI unsigned long long alt_IMValueDict_GetSize(struct alt_IMValueDict* _instance);

CAPI void alt_IMValueDict_Get(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDict_Get_CAPI_Heap(struct alt_IMValueDict* _instance, struct alt_String* key);

CAPI void alt_IMValueDict_Get_1(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueDict_Get_1_CAPI_Heap(struct alt_IMValueDict* _instance, struct alt_String* key);

CAPI void alt_IMValueDict_Set(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IMValueDict_SetConst(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_constIMValue* val);

CAPI void alt_IMValueDict_Delete(struct alt_IMValueDict* _instance, struct alt_String* key);

CAPI struct alt_IMValueDict_Iterator* alt_IMValueDict_Begin(struct alt_IMValueDict* _instance);

CAPI struct alt_IMValueDict_Iterator* alt_IMValueDict_Next(struct alt_IMValueDict* _instance);


typedef struct alt_IMValueDict_Iterator {
    void* vtable;
} alt_IMValueDict_Iterator;

CAPI void alt_IMValueDict_Iterator_CAPI_Free(struct alt_IMValueDict_Iterator* ptr);

CAPI void alt_IMValueDict_Iterator_GetKey(struct alt_IMValueDict_Iterator* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueDict_Iterator_GetKey_CAPI_Heap(struct alt_IMValueDict_Iterator* _instance);

CAPI void alt_IMValueDict_Iterator_GetValue(struct alt_IMValueDict_Iterator* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueDict_Iterator_GetValue_CAPI_Heap(struct alt_IMValueDict_Iterator* _instance);

CAPI void alt_IMValueDict_Iterator_Assign_constIMValueDict_IteratorRef(struct alt_IMValueDict_Iterator* _instance, struct alt_IMValueDict_Iterator* _p0);

CAPI void alt_IMValueDict_Iterator_Assign_IMValueDict_IteratorRefRef(struct alt_IMValueDict_Iterator* _instance, struct alt_IMValueDict_Iterator* _p0);


CAPI void alt_IMValueBaseObject_CAPI_Free(struct alt_IMValueBaseObject* ptr);

CAPI struct alt_IMValueBaseObject* alt_CRefCountable_to_alt_IMValueBaseObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueBaseObject_to_alt_CRefCountable(struct alt_IMValueBaseObject* from);

CAPI unsigned long long alt_IMValueBaseObject_GetRefCount(struct alt_IMValueBaseObject* _instance);

CAPI void alt_IMValueBaseObject_AddRef(struct alt_IMValueBaseObject* _instance);

CAPI void alt_IMValueBaseObject_RemoveRef(struct alt_IMValueBaseObject* _instance);

CAPI void alt_IMValueBaseObject_AddWeakRef(struct alt_IMValueBaseObject* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueBaseObject_RemoveWeakRef(struct alt_IMValueBaseObject* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueBaseObject* alt_IMValue_to_alt_IMValueBaseObject(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueBaseObject_to_alt_IMValue(struct alt_IMValueBaseObject* from);

CAPI alt_IMValue_Type alt_IMValueBaseObject_GetType(struct alt_IMValueBaseObject* _instance);

CAPI void alt_IMValueBaseObject_ToString(struct alt_IMValueBaseObject* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueBaseObject_ToString_CAPI_Heap(struct alt_IMValueBaseObject* _instance);

CAPI double alt_IMValueBaseObject_ToNumber(struct alt_IMValueBaseObject* _instance);

CAPI void alt_IMValueBaseObject_Clone(struct alt_IMValueBaseObject* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueBaseObject_Clone_CAPI_Heap(struct alt_IMValueBaseObject* _instance);


CAPI void alt_IMValueBaseObject_Value(struct alt_IMValueBaseObject* _instance, struct alt_RefBase_RefStore_IBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_IMValueBaseObject_Value_CAPI_Heap(struct alt_IMValueBaseObject* _instance);


CAPI void alt_IMValueFunction_CAPI_Free(struct alt_IMValueFunction* ptr);

CAPI struct alt_IMValueFunction* alt_CRefCountable_to_alt_IMValueFunction(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueFunction_to_alt_CRefCountable(struct alt_IMValueFunction* from);

CAPI unsigned long long alt_IMValueFunction_GetRefCount(struct alt_IMValueFunction* _instance);

CAPI void alt_IMValueFunction_AddRef(struct alt_IMValueFunction* _instance);

CAPI void alt_IMValueFunction_RemoveRef(struct alt_IMValueFunction* _instance);

CAPI void alt_IMValueFunction_AddWeakRef(struct alt_IMValueFunction* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueFunction_RemoveWeakRef(struct alt_IMValueFunction* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueFunction* alt_IMValue_to_alt_IMValueFunction(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueFunction_to_alt_IMValue(struct alt_IMValueFunction* from);

CAPI alt_IMValue_Type alt_IMValueFunction_GetType(struct alt_IMValueFunction* _instance);

CAPI void alt_IMValueFunction_ToString(struct alt_IMValueFunction* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueFunction_ToString_CAPI_Heap(struct alt_IMValueFunction* _instance);

CAPI double alt_IMValueFunction_ToNumber(struct alt_IMValueFunction* _instance);

CAPI void alt_IMValueFunction_Clone(struct alt_IMValueFunction* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Clone_CAPI_Heap(struct alt_IMValueFunction* _instance);


CAPI void alt_IMValueFunction_Call(struct alt_IMValueFunction* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Call_CAPI_Heap(struct alt_IMValueFunction* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args);


typedef struct alt_IMValueFunction_Impl {
    void* vtable;
    unsigned long long refCount;
} alt_IMValueFunction_Impl;

CAPI void alt_IMValueFunction_Impl_Call(struct alt_IMValueFunction_Impl* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Impl_Call_CAPI_Heap(struct alt_IMValueFunction_Impl* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args);

CAPI void alt_IMValueFunction_Impl_AddRef(struct alt_IMValueFunction_Impl* _instance);

CAPI void alt_IMValueFunction_Impl_RemoveRef(struct alt_IMValueFunction_Impl* _instance);

CAPI void alt_IMValueFunction_Impl_Assign_constIMValueFunction_ImplRef(struct alt_IMValueFunction_Impl* _instance, struct alt_IMValueFunction_Impl* _p0);


CAPI void alt_IMValueVector3_CAPI_Free(struct alt_IMValueVector3* ptr);

CAPI struct alt_IMValueVector3* alt_CRefCountable_to_alt_IMValueVector3(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueVector3_to_alt_CRefCountable(struct alt_IMValueVector3* from);

CAPI unsigned long long alt_IMValueVector3_GetRefCount(struct alt_IMValueVector3* _instance);

CAPI void alt_IMValueVector3_AddRef(struct alt_IMValueVector3* _instance);

CAPI void alt_IMValueVector3_RemoveRef(struct alt_IMValueVector3* _instance);

CAPI void alt_IMValueVector3_AddWeakRef(struct alt_IMValueVector3* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueVector3_RemoveWeakRef(struct alt_IMValueVector3* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueVector3* alt_IMValue_to_alt_IMValueVector3(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueVector3_to_alt_IMValue(struct alt_IMValueVector3* from);

CAPI alt_IMValue_Type alt_IMValueVector3_GetType(struct alt_IMValueVector3* _instance);

CAPI void alt_IMValueVector3_ToString(struct alt_IMValueVector3* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueVector3_ToString_CAPI_Heap(struct alt_IMValueVector3* _instance);

CAPI double alt_IMValueVector3_ToNumber(struct alt_IMValueVector3* _instance);

CAPI void alt_IMValueVector3_Clone(struct alt_IMValueVector3* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueVector3_Clone_CAPI_Heap(struct alt_IMValueVector3* _instance);


CAPI void alt_IMValueVector3_Value(struct alt_IMValueVector3* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_IMValueVector3_Value_CAPI_Heap(struct alt_IMValueVector3* _instance);


CAPI void alt_IMValueRGBA_CAPI_Free(struct alt_IMValueRGBA* ptr);

CAPI struct alt_IMValueRGBA* alt_CRefCountable_to_alt_IMValueRGBA(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueRGBA_to_alt_CRefCountable(struct alt_IMValueRGBA* from);

CAPI unsigned long long alt_IMValueRGBA_GetRefCount(struct alt_IMValueRGBA* _instance);

CAPI void alt_IMValueRGBA_AddRef(struct alt_IMValueRGBA* _instance);

CAPI void alt_IMValueRGBA_RemoveRef(struct alt_IMValueRGBA* _instance);

CAPI void alt_IMValueRGBA_AddWeakRef(struct alt_IMValueRGBA* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueRGBA_RemoveWeakRef(struct alt_IMValueRGBA* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueRGBA* alt_IMValue_to_alt_IMValueRGBA(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueRGBA_to_alt_IMValue(struct alt_IMValueRGBA* from);

CAPI alt_IMValue_Type alt_IMValueRGBA_GetType(struct alt_IMValueRGBA* _instance);

CAPI void alt_IMValueRGBA_ToString(struct alt_IMValueRGBA* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueRGBA_ToString_CAPI_Heap(struct alt_IMValueRGBA* _instance);

CAPI double alt_IMValueRGBA_ToNumber(struct alt_IMValueRGBA* _instance);

CAPI void alt_IMValueRGBA_Clone(struct alt_IMValueRGBA* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueRGBA_Clone_CAPI_Heap(struct alt_IMValueRGBA* _instance);


CAPI void alt_IMValueRGBA_Value(struct alt_IMValueRGBA* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_IMValueRGBA_Value_CAPI_Heap(struct alt_IMValueRGBA* _instance);


CAPI void alt_IMValueByteArray_CAPI_Free(struct alt_IMValueByteArray* ptr);

CAPI struct alt_IMValueByteArray* alt_CRefCountable_to_alt_IMValueByteArray(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueByteArray_to_alt_CRefCountable(struct alt_IMValueByteArray* from);

CAPI unsigned long long alt_IMValueByteArray_GetRefCount(struct alt_IMValueByteArray* _instance);

CAPI void alt_IMValueByteArray_AddRef(struct alt_IMValueByteArray* _instance);

CAPI void alt_IMValueByteArray_RemoveRef(struct alt_IMValueByteArray* _instance);

CAPI void alt_IMValueByteArray_AddWeakRef(struct alt_IMValueByteArray* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IMValueByteArray_RemoveWeakRef(struct alt_IMValueByteArray* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IMValueByteArray* alt_IMValue_to_alt_IMValueByteArray(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueByteArray_to_alt_IMValue(struct alt_IMValueByteArray* from);

CAPI alt_IMValue_Type alt_IMValueByteArray_GetType(struct alt_IMValueByteArray* _instance);

CAPI void alt_IMValueByteArray_ToString(struct alt_IMValueByteArray* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IMValueByteArray_ToString_CAPI_Heap(struct alt_IMValueByteArray* _instance);

CAPI double alt_IMValueByteArray_ToNumber(struct alt_IMValueByteArray* _instance);

CAPI void alt_IMValueByteArray_Clone(struct alt_IMValueByteArray* _instance, struct alt_RefBase_RefStore_IMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueByteArray_Clone_CAPI_Heap(struct alt_IMValueByteArray* _instance);


CAPI unsigned long long alt_IMValueByteArray_GetSize(struct alt_IMValueByteArray* _instance);

CAPI unsigned char* alt_IMValueByteArray_GetData(struct alt_IMValueByteArray* _instance);

CAPI unsigned char* alt_IMValueByteArray_GetData_1(struct alt_IMValueByteArray* _instance);


CAPI struct alt_IBaseObject* alt_CRefCountable_to_alt_IBaseObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IBaseObject_to_alt_CRefCountable(struct alt_IBaseObject* from);

CAPI unsigned long long alt_IBaseObject_GetRefCount(struct alt_IBaseObject* _instance);

CAPI void alt_IBaseObject_AddRef(struct alt_IBaseObject* _instance);

CAPI void alt_IBaseObject_RemoveRef(struct alt_IBaseObject* _instance);

CAPI void alt_IBaseObject_AddWeakRef(struct alt_IBaseObject* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IBaseObject_RemoveWeakRef(struct alt_IBaseObject* _instance, struct alt_IWeakRef* ref);


typedef enum alt_IBaseObject_Type {
    ALT_IBASEOBJECT_TYPE_PLAYER = 0,
    ALT_IBASEOBJECT_TYPE_VEHICLE = 1,
    ALT_IBASEOBJECT_TYPE_BLIP = 2,
    ALT_IBASEOBJECT_TYPE_WEBVIEW = 3,
    ALT_IBASEOBJECT_TYPE_VOICE_CHANNEL = 4,
    ALT_IBASEOBJECT_TYPE_COLSHAPE = 5,
    ALT_IBASEOBJECT_TYPE_CHECKPOINT = 6
};

CAPI alt_IBaseObject_Type alt_IBaseObject_GetType(struct alt_IBaseObject* _instance);

CAPI _Bool alt_IBaseObject_HasMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key);

CAPI void alt_IBaseObject_GetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IBaseObject_GetMetaData_CAPI_Heap(struct alt_IBaseObject* _instance, struct alt_StringView* key);

CAPI void alt_IBaseObject_SetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IBaseObject_DeleteMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key);


CAPI struct alt_IWorldObject* alt_CRefCountable_to_alt_IWorldObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IWorldObject_to_alt_CRefCountable(struct alt_IWorldObject* from);

CAPI unsigned long long alt_IWorldObject_GetRefCount(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_AddRef(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_RemoveRef(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_AddWeakRef(struct alt_IWorldObject* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IWorldObject_RemoveWeakRef(struct alt_IWorldObject* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IWorldObject* alt_IBaseObject_to_alt_IWorldObject(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IWorldObject_to_alt_IBaseObject(struct alt_IWorldObject* from);

CAPI alt_IBaseObject_Type alt_IWorldObject_GetType(struct alt_IWorldObject* _instance);

CAPI _Bool alt_IWorldObject_HasMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key);

CAPI void alt_IWorldObject_GetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IWorldObject_GetMetaData_CAPI_Heap(struct alt_IWorldObject* _instance, struct alt_StringView* key);

CAPI void alt_IWorldObject_SetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IWorldObject_DeleteMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key);


CAPI void alt_IWorldObject_GetPosition(struct alt_IWorldObject* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IWorldObject_GetPosition_CAPI_Heap(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_SetPosition(struct alt_IWorldObject* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IWorldObject_GetDimension(struct alt_IWorldObject* _instance);

CAPI void alt_IWorldObject_SetDimension(struct alt_IWorldObject* _instance, int dimension);


CAPI struct alt_IEntity* alt_CRefCountable_to_alt_IEntity(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IEntity_to_alt_CRefCountable(struct alt_IEntity* from);

CAPI unsigned long long alt_IEntity_GetRefCount(struct alt_IEntity* _instance);

CAPI void alt_IEntity_AddRef(struct alt_IEntity* _instance);

CAPI void alt_IEntity_RemoveRef(struct alt_IEntity* _instance);

CAPI void alt_IEntity_AddWeakRef(struct alt_IEntity* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IEntity_RemoveWeakRef(struct alt_IEntity* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IEntity* alt_IBaseObject_to_alt_IEntity(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IEntity_to_alt_IBaseObject(struct alt_IEntity* from);

CAPI alt_IBaseObject_Type alt_IEntity_GetType(struct alt_IEntity* _instance);

CAPI _Bool alt_IEntity_HasMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_GetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetMetaData_CAPI_Heap(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_SetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IEntity_DeleteMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);


CAPI struct alt_IEntity* alt_IWorldObject_to_alt_IEntity(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IEntity_to_alt_IWorldObject(struct alt_IEntity* from);

CAPI void alt_IEntity_GetPosition(struct alt_IEntity* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IEntity_GetPosition_CAPI_Heap(struct alt_IEntity* _instance);

CAPI void alt_IEntity_SetPosition(struct alt_IEntity* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IEntity_GetDimension(struct alt_IEntity* _instance);

CAPI void alt_IEntity_SetDimension(struct alt_IEntity* _instance, int dimension);


CAPI unsigned short alt_IEntity_GetID(struct alt_IEntity* _instance);

CAPI void alt_IEntity_GetNetworkOwner(struct alt_IEntity* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IEntity_GetNetworkOwner_CAPI_Heap(struct alt_IEntity* _instance);

CAPI unsigned int alt_IEntity_GetModel(struct alt_IEntity* _instance);

CAPI void alt_IEntity_GetRotation(struct alt_IEntity* _instance, struct alt_Vector_float_3_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IEntity_GetRotation_CAPI_Heap(struct alt_IEntity* _instance);

CAPI void alt_IEntity_SetRotation(struct alt_IEntity* _instance, struct alt_Vector_float_3_RotationLayout* rot);

CAPI _Bool alt_IEntity_HasSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_GetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetSyncedMetaData_CAPI_Heap(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI _Bool alt_IEntity_HasStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_GetStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetStreamSyncedMetaData_CAPI_Heap(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_SetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IEntity_DeleteSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

CAPI void alt_IEntity_SetStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IEntity_DeleteStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);


CAPI struct alt_IPlayer* alt_CRefCountable_to_alt_IPlayer(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IPlayer_to_alt_CRefCountable(struct alt_IPlayer* from);

CAPI unsigned long long alt_IPlayer_GetRefCount(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_AddRef(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_RemoveRef(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_AddWeakRef(struct alt_IPlayer* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IPlayer_RemoveWeakRef(struct alt_IPlayer* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IPlayer* alt_IBaseObject_to_alt_IPlayer(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IPlayer_to_alt_IBaseObject(struct alt_IPlayer* from);

CAPI alt_IBaseObject_Type alt_IPlayer_GetType(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_HasMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_GetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetMetaData_CAPI_Heap(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_SetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IPlayer_DeleteMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);


CAPI struct alt_IPlayer* alt_IWorldObject_to_alt_IPlayer(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IPlayer_to_alt_IWorldObject(struct alt_IPlayer* from);

CAPI void alt_IPlayer_GetPosition(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetPosition_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetPosition(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IPlayer_GetDimension(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetDimension(struct alt_IPlayer* _instance, int dimension);


CAPI struct alt_IPlayer* alt_IEntity_to_alt_IPlayer(struct alt_IEntity* from);

CAPI struct alt_IEntity* alt_IPlayer_to_alt_IEntity(struct alt_IPlayer* from);

CAPI unsigned short alt_IPlayer_GetID(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetNetworkOwner(struct alt_IPlayer* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IPlayer_GetNetworkOwner_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetModel(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetRotation_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* rot);

CAPI _Bool alt_IPlayer_HasSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_GetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetSyncedMetaData_CAPI_Heap(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI _Bool alt_IPlayer_HasStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_GetStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetStreamSyncedMetaData_CAPI_Heap(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_SetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IPlayer_DeleteSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

CAPI void alt_IPlayer_SetStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IPlayer_DeleteStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);


CAPI _Bool alt_IPlayer_IsConnected(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetPing(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetIP(struct alt_IPlayer* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IPlayer_GetIP_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_Spawn(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos, unsigned int delayMs);

CAPI void alt_IPlayer_Despawn(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetName(struct alt_IPlayer* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IPlayer_GetName_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI unsigned long long alt_IPlayer_GetSocialID(struct alt_IPlayer* _instance);

CAPI unsigned long long alt_IPlayer_GetHwidHash(struct alt_IPlayer* _instance);

CAPI unsigned long long alt_IPlayer_GetHwidExHash(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetAuthToken(struct alt_IPlayer* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IPlayer_GetAuthToken_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI unsigned short alt_IPlayer_GetHealth(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetHealth(struct alt_IPlayer* _instance, unsigned short health);

CAPI unsigned short alt_IPlayer_GetMaxHealth(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetMaxHealth(struct alt_IPlayer* _instance, unsigned short health);

CAPI void alt_IPlayer_SetDateTime(struct alt_IPlayer* _instance, int day, int month, int year, int hour, int minute, int second);

CAPI void alt_IPlayer_SetWeather(struct alt_IPlayer* _instance, unsigned int weather);

CAPI void alt_IPlayer_GiveWeapon(struct alt_IPlayer* _instance, unsigned int weapon, int ammo, _Bool selectWeapon);

CAPI void alt_IPlayer_RemoveWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

CAPI void alt_IPlayer_RemoveAllWeapons(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_AddWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

CAPI void alt_IPlayer_RemoveWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

CAPI void alt_IPlayer_GetCurrentWeaponComponents(struct alt_IPlayer* _instance, struct alt_Array_unsignedint* _returnValue);

// Return ptr must be manually freed with alt_Array_unsignedint_CAPI_Free()
CAPI struct alt_Array_unsignedint* alt_IPlayer_GetCurrentWeaponComponents_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetWeaponTintIndex(struct alt_IPlayer* _instance, unsigned int weapon, unsigned char tintIndex);

CAPI unsigned char alt_IPlayer_GetCurrentWeaponTintIndex(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetCurrentWeapon(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetCurrentWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

CAPI _Bool alt_IPlayer_IsDead(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsJumping(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsInRagdoll(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsAiming(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsShooting(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsReloading(struct alt_IPlayer* _instance);

CAPI unsigned short alt_IPlayer_GetArmour(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetArmour(struct alt_IPlayer* _instance, unsigned short armor);

CAPI unsigned short alt_IPlayer_GetMaxArmour(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_SetMaxArmour(struct alt_IPlayer* _instance, unsigned short armor);

CAPI float alt_IPlayer_GetMoveSpeed(struct alt_IPlayer* _instance);

CAPI unsigned int alt_IPlayer_GetWeapon(struct alt_IPlayer* _instance);

CAPI unsigned short alt_IPlayer_GetAmmo(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetAimPos(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetAimPos_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetHeadRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetHeadRotation_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsInVehicle(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetVehicle(struct alt_IPlayer* _instance, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_IPlayer_GetVehicle_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI unsigned char alt_IPlayer_GetSeat(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetEntityAimingAt(struct alt_IPlayer* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_IPlayer_GetEntityAimingAt_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_GetEntityAimOffset(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetEntityAimOffset_CAPI_Heap(struct alt_IPlayer* _instance);

CAPI _Bool alt_IPlayer_IsFlashlightActive(struct alt_IPlayer* _instance);

CAPI void alt_IPlayer_Kick(struct alt_IPlayer* _instance, struct alt_StringView* reason);

CAPI void alt_IPlayer_SetModel(struct alt_IPlayer* _instance, unsigned int model);


CAPI struct alt_IVehicle* alt_CRefCountable_to_alt_IVehicle(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IVehicle_to_alt_CRefCountable(struct alt_IVehicle* from);

CAPI unsigned long long alt_IVehicle_GetRefCount(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_AddRef(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_RemoveRef(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_AddWeakRef(struct alt_IVehicle* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IVehicle_RemoveWeakRef(struct alt_IVehicle* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IVehicle* alt_IBaseObject_to_alt_IVehicle(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IVehicle_to_alt_IBaseObject(struct alt_IVehicle* from);

CAPI alt_IBaseObject_Type alt_IVehicle_GetType(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_HasMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_GetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetMetaData_CAPI_Heap(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_SetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IVehicle_DeleteMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);


CAPI struct alt_IVehicle* alt_IWorldObject_to_alt_IVehicle(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IVehicle_to_alt_IWorldObject(struct alt_IVehicle* from);

CAPI void alt_IVehicle_GetPosition(struct alt_IVehicle* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IVehicle_GetPosition_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPosition(struct alt_IVehicle* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IVehicle_GetDimension(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetDimension(struct alt_IVehicle* _instance, int dimension);


CAPI struct alt_IVehicle* alt_IEntity_to_alt_IVehicle(struct alt_IEntity* from);

CAPI struct alt_IEntity* alt_IVehicle_to_alt_IEntity(struct alt_IVehicle* from);

CAPI unsigned short alt_IVehicle_GetID(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetNetworkOwner(struct alt_IVehicle* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IVehicle_GetNetworkOwner_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI unsigned int alt_IVehicle_GetModel(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetRotation(struct alt_IVehicle* _instance, struct alt_Vector_float_3_RotationLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IVehicle_GetRotation_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRotation(struct alt_IVehicle* _instance, struct alt_Vector_float_3_RotationLayout* rot);

CAPI _Bool alt_IVehicle_HasSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_GetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetSyncedMetaData_CAPI_Heap(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI _Bool alt_IVehicle_HasStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_GetStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetStreamSyncedMetaData_CAPI_Heap(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_SetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IVehicle_DeleteSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

CAPI void alt_IVehicle_SetStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IVehicle_DeleteStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);


CAPI void alt_IVehicle_GetDriver(struct alt_IVehicle* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IVehicle_GetDriver_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsDestroyed(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetMod(struct alt_IVehicle* _instance, unsigned char category);

CAPI unsigned char alt_IVehicle_GetModsCount(struct alt_IVehicle* _instance, unsigned char category);

CAPI _Bool alt_IVehicle_SetMod(struct alt_IVehicle* _instance, unsigned char category, unsigned char id);

CAPI unsigned char alt_IVehicle_GetModKitsCount(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetModKit(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_SetModKit(struct alt_IVehicle* _instance, unsigned char id);

CAPI _Bool alt_IVehicle_IsPrimaryColorRGB(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetPrimaryColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_IVehicle_GetPrimaryColorRGB_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPrimaryColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI void alt_IVehicle_SetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI _Bool alt_IVehicle_IsSecondaryColorRGB(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetSecondaryColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_IVehicle_GetSecondaryColorRGB_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSecondaryColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI void alt_IVehicle_SetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI unsigned char alt_IVehicle_GetPearlColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPearlColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetWheelColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWheelColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetInteriorColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetInteriorColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned char alt_IVehicle_GetDashboardColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetDashboardColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI _Bool alt_IVehicle_IsTireSmokeColorCustom(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_IVehicle_GetTireSmokeColor_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI unsigned char alt_IVehicle_GetWheelType(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetWheelVariation(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetRearWheelVariation(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWheels(struct alt_IVehicle* _instance, unsigned char type, unsigned char variation);

CAPI void alt_IVehicle_SetRearWheels(struct alt_IVehicle* _instance, unsigned char variation);

CAPI _Bool alt_IVehicle_GetCustomTires(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetCustomTires(struct alt_IVehicle* _instance, _Bool state);

CAPI unsigned char alt_IVehicle_GetSpecialDarkness(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSpecialDarkness(struct alt_IVehicle* _instance, unsigned char value);

CAPI unsigned int alt_IVehicle_GetNumberplateIndex(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNumberplateIndex(struct alt_IVehicle* _instance, unsigned int index);

CAPI void alt_IVehicle_GetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IVehicle_GetNumberplateText_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* text);

CAPI unsigned char alt_IVehicle_GetWindowTint(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetWindowTint(struct alt_IVehicle* _instance, unsigned char tint);

CAPI unsigned char alt_IVehicle_GetDirtLevel(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetDirtLevel(struct alt_IVehicle* _instance, unsigned char level);

CAPI _Bool alt_IVehicle_IsExtraOn(struct alt_IVehicle* _instance, unsigned char extraID);

CAPI void alt_IVehicle_ToggleExtra(struct alt_IVehicle* _instance, unsigned char extraID, _Bool state);

CAPI _Bool alt_IVehicle_IsNeonActive(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetNeonActive(struct alt_IVehicle* _instance, _Bool* left, _Bool* right, _Bool* front, _Bool* back);

CAPI void alt_IVehicle_SetNeonActive(struct alt_IVehicle* _instance, _Bool left, _Bool right, _Bool front, _Bool back);

CAPI void alt_IVehicle_GetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_IVehicle_GetNeonColor_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

CAPI unsigned char alt_IVehicle_GetLivery(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetLivery(struct alt_IVehicle* _instance, unsigned char livery);

CAPI unsigned char alt_IVehicle_GetRoofLivery(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRoofLivery(struct alt_IVehicle* _instance, unsigned char roofLivery);

CAPI void alt_IVehicle_GetAppearanceDataBase64(struct alt_IVehicle* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IVehicle_GetAppearanceDataBase64_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadAppearanceDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI _Bool alt_IVehicle_IsEngineOn(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetEngineOn(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsHandbrakeActive(struct alt_IVehicle* _instance);

CAPI unsigned char alt_IVehicle_GetHeadlightColor(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetHeadlightColor(struct alt_IVehicle* _instance, unsigned char color);

CAPI unsigned int alt_IVehicle_GetRadioStationIndex(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRadioStationIndex(struct alt_IVehicle* _instance, unsigned int stationIndex);

CAPI _Bool alt_IVehicle_IsSirenActive(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetSirenActive(struct alt_IVehicle* _instance, _Bool state);

CAPI unsigned char alt_IVehicle_GetLockState(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetLockState(struct alt_IVehicle* _instance, unsigned char state);

CAPI unsigned char alt_IVehicle_GetDoorState(struct alt_IVehicle* _instance, unsigned char doorId);

CAPI void alt_IVehicle_SetDoorState(struct alt_IVehicle* _instance, unsigned char doorId, unsigned char state);

CAPI _Bool alt_IVehicle_IsWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId, _Bool state);

CAPI _Bool alt_IVehicle_IsDaylightOn(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsNightlightOn(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsRoofOpened(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetRoofOpened(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsFlamethrowerActive(struct alt_IVehicle* _instance);

CAPI float alt_IVehicle_GetLightsMultiplier(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetLightsMultiplier(struct alt_IVehicle* _instance, float multiplier);

CAPI void alt_IVehicle_GetGameStateBase64(struct alt_IVehicle* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IVehicle_GetGameStateBase64_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadGameStateFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI int alt_IVehicle_GetEngineHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetEngineHealth(struct alt_IVehicle* _instance, int health);

CAPI int alt_IVehicle_GetPetrolTankHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetPetrolTankHealth(struct alt_IVehicle* _instance, int health);

CAPI unsigned char alt_IVehicle_GetWheelsCount(struct alt_IVehicle* _instance);

CAPI _Bool alt_IVehicle_IsWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI _Bool alt_IVehicle_DoesWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI _Bool alt_IVehicle_IsWheelDetached(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelDetached(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI _Bool alt_IVehicle_IsWheelOnFire(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelOnFire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

CAPI float alt_IVehicle_GetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId);

CAPI void alt_IVehicle_SetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId, float health);

CAPI unsigned char alt_IVehicle_GetRepairsCount(struct alt_IVehicle* _instance);

CAPI unsigned int alt_IVehicle_GetBodyHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetBodyHealth(struct alt_IVehicle* _instance, unsigned int health);

CAPI unsigned int alt_IVehicle_GetBodyAdditionalHealth(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_SetBodyAdditionalHealth(struct alt_IVehicle* _instance, unsigned int health);

CAPI void alt_IVehicle_GetHealthDataBase64(struct alt_IVehicle* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IVehicle_GetHealthDataBase64_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadHealthDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI unsigned char alt_IVehicle_GetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId);

CAPI void alt_IVehicle_SetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId, unsigned char damage);

CAPI unsigned char alt_IVehicle_GetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId);

CAPI void alt_IVehicle_SetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId, unsigned char shootsCount);

CAPI _Bool alt_IVehicle_IsLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId);

CAPI void alt_IVehicle_SetLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_IsWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_IsSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId);

CAPI void alt_IVehicle_SetSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId, _Bool isDamaged);

CAPI _Bool alt_IVehicle_HasArmoredWindows(struct alt_IVehicle* _instance);

CAPI float alt_IVehicle_GetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId, float health);

CAPI unsigned char alt_IVehicle_GetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId);

CAPI void alt_IVehicle_SetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId, unsigned char count);

CAPI unsigned char alt_IVehicle_GetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId);

CAPI void alt_IVehicle_SetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId, unsigned char damageLevel);

CAPI void alt_IVehicle_GetDamageDataBase64(struct alt_IVehicle* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IVehicle_GetDamageDataBase64_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadDamageDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI void alt_IVehicle_SetManualEngineControl(struct alt_IVehicle* _instance, _Bool state);

CAPI _Bool alt_IVehicle_IsManualEngineControl(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_GetScriptDataBase64(struct alt_IVehicle* _instance, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_IVehicle_GetScriptDataBase64_CAPI_Heap(struct alt_IVehicle* _instance);

CAPI void alt_IVehicle_LoadScriptDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

CAPI _Bool alt_IVehicle_IsDestroyed_1(struct alt_IVehicle* _instance);


CAPI struct alt_IColShape* alt_CRefCountable_to_alt_IColShape(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IColShape_to_alt_CRefCountable(struct alt_IColShape* from);

CAPI unsigned long long alt_IColShape_GetRefCount(struct alt_IColShape* _instance);

CAPI void alt_IColShape_AddRef(struct alt_IColShape* _instance);

CAPI void alt_IColShape_RemoveRef(struct alt_IColShape* _instance);

CAPI void alt_IColShape_AddWeakRef(struct alt_IColShape* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IColShape_RemoveWeakRef(struct alt_IColShape* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IColShape* alt_IBaseObject_to_alt_IColShape(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IColShape_to_alt_IBaseObject(struct alt_IColShape* from);

CAPI alt_IBaseObject_Type alt_IColShape_GetType(struct alt_IColShape* _instance);

CAPI _Bool alt_IColShape_HasMetaData(struct alt_IColShape* _instance, struct alt_StringView* key);

CAPI void alt_IColShape_GetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IColShape_GetMetaData_CAPI_Heap(struct alt_IColShape* _instance, struct alt_StringView* key);

CAPI void alt_IColShape_SetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IColShape_DeleteMetaData(struct alt_IColShape* _instance, struct alt_StringView* key);


CAPI struct alt_IColShape* alt_IWorldObject_to_alt_IColShape(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IColShape_to_alt_IWorldObject(struct alt_IColShape* from);

CAPI void alt_IColShape_GetPosition(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IColShape_GetPosition_CAPI_Heap(struct alt_IColShape* _instance);

CAPI void alt_IColShape_SetPosition(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IColShape_GetDimension(struct alt_IColShape* _instance);

CAPI void alt_IColShape_SetDimension(struct alt_IColShape* _instance, int dimension);


typedef enum alt_IColShape_ColShapeType {
    ALT_ICOLSHAPE_COLSHAPETYPE_SPHERE = 0,
    ALT_ICOLSHAPE_COLSHAPETYPE_CYLINDER = 1,
    ALT_ICOLSHAPE_COLSHAPETYPE_CIRCLE = 2,
    ALT_ICOLSHAPE_COLSHAPETYPE_CUBOID = 3,
    ALT_ICOLSHAPE_COLSHAPETYPE_RECT = 4,
    ALT_ICOLSHAPE_COLSHAPETYPE_CHECKPOINT_CYLINDER = 5
};

CAPI alt_IColShape_ColShapeType alt_IColShape_GetColshapeType(struct alt_IColShape* _instance);

CAPI _Bool alt_IColShape_IsEntityIn(struct alt_IColShape* _instance, struct alt_RefBase_RefStore_IEntity* ent);

CAPI _Bool alt_IColShape_IsPointIn(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* p);


CAPI struct alt_ICheckpoint* alt_CRefCountable_to_alt_ICheckpoint(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_ICheckpoint_to_alt_CRefCountable(struct alt_ICheckpoint* from);

CAPI unsigned long long alt_ICheckpoint_GetRefCount(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_AddRef(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_RemoveRef(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_AddWeakRef(struct alt_ICheckpoint* _instance, struct alt_IWeakRef* ref);

CAPI void alt_ICheckpoint_RemoveWeakRef(struct alt_ICheckpoint* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_ICheckpoint* alt_IBaseObject_to_alt_ICheckpoint(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_ICheckpoint_to_alt_IBaseObject(struct alt_ICheckpoint* from);

CAPI alt_IBaseObject_Type alt_ICheckpoint_GetType(struct alt_ICheckpoint* _instance);

CAPI _Bool alt_ICheckpoint_HasMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key);

CAPI void alt_ICheckpoint_GetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_ICheckpoint_GetMetaData_CAPI_Heap(struct alt_ICheckpoint* _instance, struct alt_StringView* key);

CAPI void alt_ICheckpoint_SetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_ICheckpoint_DeleteMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key);


CAPI struct alt_ICheckpoint* alt_IWorldObject_to_alt_ICheckpoint(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_ICheckpoint_to_alt_IWorldObject(struct alt_ICheckpoint* from);

CAPI void alt_ICheckpoint_GetPosition(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_ICheckpoint_GetPosition_CAPI_Heap(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_SetPosition(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_ICheckpoint_GetDimension(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_SetDimension(struct alt_ICheckpoint* _instance, int dimension);


CAPI struct alt_ICheckpoint* alt_IColShape_to_alt_ICheckpoint(struct alt_IColShape* from);

CAPI struct alt_IColShape* alt_ICheckpoint_to_alt_IColShape(struct alt_ICheckpoint* from);

CAPI alt_IColShape_ColShapeType alt_ICheckpoint_GetColshapeType(struct alt_ICheckpoint* _instance);

CAPI _Bool alt_ICheckpoint_IsEntityIn(struct alt_ICheckpoint* _instance, struct alt_RefBase_RefStore_IEntity* ent);

CAPI _Bool alt_ICheckpoint_IsPointIn(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* p);


CAPI unsigned char alt_ICheckpoint_GetCheckpointType(struct alt_ICheckpoint* _instance);

CAPI float alt_ICheckpoint_GetHeight(struct alt_ICheckpoint* _instance);

CAPI float alt_ICheckpoint_GetRadius(struct alt_ICheckpoint* _instance);

CAPI void alt_ICheckpoint_GetColor(struct alt_ICheckpoint* _instance, struct alt_RGBA* _returnValue);

// Return ptr must be manually freed with alt_RGBA_CAPI_Free()
CAPI struct alt_RGBA* alt_ICheckpoint_GetColor_CAPI_Heap(struct alt_ICheckpoint* _instance);


CAPI struct alt_IBlip* alt_CRefCountable_to_alt_IBlip(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IBlip_to_alt_CRefCountable(struct alt_IBlip* from);

CAPI unsigned long long alt_IBlip_GetRefCount(struct alt_IBlip* _instance);

CAPI void alt_IBlip_AddRef(struct alt_IBlip* _instance);

CAPI void alt_IBlip_RemoveRef(struct alt_IBlip* _instance);

CAPI void alt_IBlip_AddWeakRef(struct alt_IBlip* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IBlip_RemoveWeakRef(struct alt_IBlip* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IBlip* alt_IBaseObject_to_alt_IBlip(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IBlip_to_alt_IBaseObject(struct alt_IBlip* from);

CAPI alt_IBaseObject_Type alt_IBlip_GetType(struct alt_IBlip* _instance);

CAPI _Bool alt_IBlip_HasMetaData(struct alt_IBlip* _instance, struct alt_StringView* key);

CAPI void alt_IBlip_GetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IBlip_GetMetaData_CAPI_Heap(struct alt_IBlip* _instance, struct alt_StringView* key);

CAPI void alt_IBlip_SetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IBlip_DeleteMetaData(struct alt_IBlip* _instance, struct alt_StringView* key);


CAPI struct alt_IBlip* alt_IWorldObject_to_alt_IBlip(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IBlip_to_alt_IWorldObject(struct alt_IBlip* from);

CAPI void alt_IBlip_GetPosition(struct alt_IBlip* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IBlip_GetPosition_CAPI_Heap(struct alt_IBlip* _instance);

CAPI void alt_IBlip_SetPosition(struct alt_IBlip* _instance, struct alt_Vector_float_3_PointLayout* pos);

CAPI int alt_IBlip_GetDimension(struct alt_IBlip* _instance);

CAPI void alt_IBlip_SetDimension(struct alt_IBlip* _instance, int dimension);


CAPI _Bool alt_IBlip_IsGlobal(struct alt_IBlip* _instance);

CAPI void alt_IBlip_GetTarget(struct alt_IBlip* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IBlip_GetTarget_CAPI_Heap(struct alt_IBlip* _instance);

CAPI _Bool alt_IBlip_IsAttached(struct alt_IBlip* _instance);

CAPI void alt_IBlip_AttachedTo(struct alt_IBlip* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_IBlip_AttachedTo_CAPI_Heap(struct alt_IBlip* _instance);

typedef enum alt_IBlip_BlipType {
    ALT_IBLIP_BLIPTYPE_VEHICLE = 1,
    ALT_IBLIP_BLIPTYPE_PED = 2,
    ALT_IBLIP_BLIPTYPE_OBJECT = 3,
    ALT_IBLIP_BLIPTYPE_DESTINATION = 4,
    ALT_IBLIP_BLIPTYPE_CONT = 5,
    ALT_IBLIP_BLIPTYPE_PICKUP_UNK = 6,
    ALT_IBLIP_BLIPTYPE_RADIUS = 7,
    ALT_IBLIP_BLIPTYPE_PICKUP = 8,
    ALT_IBLIP_BLIPTYPE_COP = 9,
    ALT_IBLIP_BLIPTYPE_AREA = 11,
    ALT_IBLIP_BLIPTYPE_GALLERY = 12,
    ALT_IBLIP_BLIPTYPE_PICKUP_OBJECT = 13
};

CAPI alt_IBlip_BlipType alt_IBlip_GetBlipType(struct alt_IBlip* _instance);

CAPI void alt_IBlip_SetSprite(struct alt_IBlip* _instance, unsigned short sprite);

CAPI void alt_IBlip_SetColor(struct alt_IBlip* _instance, unsigned char color);

CAPI void alt_IBlip_SetRoute(struct alt_IBlip* _instance, _Bool state);

CAPI void alt_IBlip_SetRouteColor(struct alt_IBlip* _instance, unsigned char color);


CAPI struct alt_IVoiceChannel* alt_CRefCountable_to_alt_IVoiceChannel(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IVoiceChannel_to_alt_CRefCountable(struct alt_IVoiceChannel* from);

CAPI unsigned long long alt_IVoiceChannel_GetRefCount(struct alt_IVoiceChannel* _instance);

CAPI void alt_IVoiceChannel_AddRef(struct alt_IVoiceChannel* _instance);

CAPI void alt_IVoiceChannel_RemoveRef(struct alt_IVoiceChannel* _instance);

CAPI void alt_IVoiceChannel_AddWeakRef(struct alt_IVoiceChannel* _instance, struct alt_IWeakRef* ref);

CAPI void alt_IVoiceChannel_RemoveWeakRef(struct alt_IVoiceChannel* _instance, struct alt_IWeakRef* ref);


CAPI struct alt_IVoiceChannel* alt_IBaseObject_to_alt_IVoiceChannel(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IVoiceChannel_to_alt_IBaseObject(struct alt_IVoiceChannel* from);

CAPI alt_IBaseObject_Type alt_IVoiceChannel_GetType(struct alt_IVoiceChannel* _instance);

CAPI _Bool alt_IVoiceChannel_HasMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key);

CAPI void alt_IVoiceChannel_GetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVoiceChannel_GetMetaData_CAPI_Heap(struct alt_IVoiceChannel* _instance, struct alt_StringView* key);

CAPI void alt_IVoiceChannel_SetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_IVoiceChannel_DeleteMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key);


CAPI _Bool alt_IVoiceChannel_IsSpatial(struct alt_IVoiceChannel* _instance);

CAPI float alt_IVoiceChannel_GetMaxDistance(struct alt_IVoiceChannel* _instance);

CAPI _Bool alt_IVoiceChannel_HasPlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

CAPI void alt_IVoiceChannel_AddPlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

CAPI void alt_IVoiceChannel_RemovePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

CAPI _Bool alt_IVoiceChannel_IsPlayerMuted(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

CAPI void alt_IVoiceChannel_MutePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

CAPI void alt_IVoiceChannel_UnmutePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);


typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_RESOURCE_START = 3,
    ALT_CEVENT_TYPE_RESOURCE_STOP = 4,
    ALT_CEVENT_TYPE_RESOURCE_ERROR = 5,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 6,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 7,
    ALT_CEVENT_TYPE_META_CHANGE = 8,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 9,
    ALT_CEVENT_TYPE_STREAM_SYNCED_META_CHANGE = 10,
    ALT_CEVENT_TYPE_GLOBAL_META_CHANGE = 11,
    ALT_CEVENT_TYPE_GLOBAL_SYNCED_META_CHANGE = 12,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 13,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 14,
    ALT_CEVENT_TYPE_FIRE_EVENT = 15,
    ALT_CEVENT_TYPE_EXPLOSION_EVENT = 16,
    ALT_CEVENT_TYPE_WEAPON_DAMAGE_EVENT = 17,
    ALT_CEVENT_TYPE_VEHICLE_DESTROY = 18,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 19,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 20,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 21,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 22,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 23,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 24,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 25,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 26,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 27,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 28,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 29,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 30,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 31,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 32,
    ALT_CEVENT_TYPE_ALL = 33,
    ALT_CEVENT_TYPE_SIZE = 34
};

typedef struct alt_CEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
} alt_CEvent;

CAPI void alt_CEvent_CAPI_Free(struct alt_CEvent* ptr);

CAPI void alt_CEvent_Create(alt_CEvent_Type _type, struct alt_CEvent* _returnValue);

// Return ptr must be manually freed with alt_CEvent_CAPI_Free()
CAPI struct alt_CEvent* alt_CEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CEvent_GetType(struct alt_CEvent* _instance);

CAPI _Bool alt_CEvent_WasCancelled(struct alt_CEvent* _instance);

CAPI void alt_CEvent_Cancel(struct alt_CEvent* _instance);

CAPI void alt_CEvent_Create_1(struct alt_CEvent* _p0, struct alt_CEvent* _returnValue);

// Return ptr must be manually freed with alt_CEvent_CAPI_Free()
CAPI struct alt_CEvent* alt_CEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CEvent_Assign_constCEventRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0);


typedef struct alt_CServerScriptEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_Array_RefBase_RefStore_constIMValue args;
} alt_CServerScriptEvent;

CAPI void alt_CServerScriptEvent_CAPI_Free(struct alt_CServerScriptEvent* ptr);

CAPI struct alt_CServerScriptEvent* alt_CEvent_to_alt_CServerScriptEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CServerScriptEvent_to_alt_CEvent(struct alt_CServerScriptEvent* from);

CAPI void alt_CServerScriptEvent_Create(alt_CEvent_Type _type, struct alt_CServerScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CServerScriptEvent_CAPI_Free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CServerScriptEvent_GetType(struct alt_CServerScriptEvent* _instance);

CAPI _Bool alt_CServerScriptEvent_WasCancelled(struct alt_CServerScriptEvent* _instance);

CAPI void alt_CServerScriptEvent_Cancel(struct alt_CServerScriptEvent* _instance);

CAPI void alt_CServerScriptEvent_Create_1(struct alt_CEvent* _p0, struct alt_CServerScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CServerScriptEvent_CAPI_Free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_constCEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CServerScriptEvent_Create_2(struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args, struct alt_CServerScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CServerScriptEvent_CAPI_Free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_2_CAPI_Heap(struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args);

CAPI void alt_CServerScriptEvent_GetName(struct alt_CServerScriptEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CServerScriptEvent_GetName_CAPI_Heap(struct alt_CServerScriptEvent* _instance);

CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_CServerScriptEvent_GetArgs(struct alt_CServerScriptEvent* _instance);

CAPI void alt_CServerScriptEvent_Create_3(struct alt_CServerScriptEvent* _p0, struct alt_CServerScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CServerScriptEvent_CAPI_Free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_3_CAPI_Heap(struct alt_CServerScriptEvent* _p0);

CAPI void alt_CServerScriptEvent_Create_4(struct alt_CServerScriptEvent* _p0, struct alt_CServerScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CServerScriptEvent_CAPI_Free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_4_CAPI_Heap(struct alt_CServerScriptEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_constCServerScriptEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);

CAPI void alt_CServerScriptEvent_Assign_CServerScriptEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);


typedef struct alt_CClientScriptEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String name;
    struct alt_Array_RefBase_RefStore_constIMValue args;
} alt_CClientScriptEvent;

CAPI void alt_CClientScriptEvent_CAPI_Free(struct alt_CClientScriptEvent* ptr);

CAPI struct alt_CClientScriptEvent* alt_CEvent_to_alt_CClientScriptEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CClientScriptEvent_to_alt_CEvent(struct alt_CClientScriptEvent* from);

CAPI void alt_CClientScriptEvent_Create(alt_CEvent_Type _type, struct alt_CClientScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CClientScriptEvent_CAPI_Free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CClientScriptEvent_GetType(struct alt_CClientScriptEvent* _instance);

CAPI _Bool alt_CClientScriptEvent_WasCancelled(struct alt_CClientScriptEvent* _instance);

CAPI void alt_CClientScriptEvent_Cancel(struct alt_CClientScriptEvent* _instance);

CAPI void alt_CClientScriptEvent_Create_1(struct alt_CEvent* _p0, struct alt_CClientScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CClientScriptEvent_CAPI_Free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_constCEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CClientScriptEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args, struct alt_CClientScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CClientScriptEvent_CAPI_Free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args);

CAPI void alt_CClientScriptEvent_GetTarget(struct alt_CClientScriptEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CClientScriptEvent_GetTarget_CAPI_Heap(struct alt_CClientScriptEvent* _instance);

CAPI void alt_CClientScriptEvent_GetName(struct alt_CClientScriptEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CClientScriptEvent_GetName_CAPI_Heap(struct alt_CClientScriptEvent* _instance);

CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_CClientScriptEvent_GetArgs(struct alt_CClientScriptEvent* _instance);

CAPI void alt_CClientScriptEvent_Create_3(struct alt_CClientScriptEvent* _p0, struct alt_CClientScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CClientScriptEvent_CAPI_Free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_3_CAPI_Heap(struct alt_CClientScriptEvent* _p0);

CAPI void alt_CClientScriptEvent_Create_4(struct alt_CClientScriptEvent* _p0, struct alt_CClientScriptEvent* _returnValue);

// Return ptr must be manually freed with alt_CClientScriptEvent_CAPI_Free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_4_CAPI_Heap(struct alt_CClientScriptEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_constCClientScriptEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);

CAPI void alt_CClientScriptEvent_Assign_CClientScriptEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);


typedef struct alt_CPlayerConnectEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String reason;
} alt_CPlayerConnectEvent;

CAPI void alt_CPlayerConnectEvent_CAPI_Free(struct alt_CPlayerConnectEvent* ptr);

CAPI struct alt_CPlayerConnectEvent* alt_CEvent_to_alt_CPlayerConnectEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerConnectEvent_to_alt_CEvent(struct alt_CPlayerConnectEvent* from);

CAPI void alt_CPlayerConnectEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerConnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_CAPI_Free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerConnectEvent_GetType(struct alt_CPlayerConnectEvent* _instance);

CAPI _Bool alt_CPlayerConnectEvent_WasCancelled(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_Cancel(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerConnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_CAPI_Free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_constCEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerConnectEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_CPlayerConnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_CAPI_Free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _target);

CAPI void alt_CPlayerConnectEvent_GetTarget(struct alt_CPlayerConnectEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerConnectEvent_GetTarget_CAPI_Heap(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_GetReason(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CPlayerConnectEvent_GetReason_CAPI_Heap(struct alt_CPlayerConnectEvent* _instance);

CAPI void alt_CPlayerConnectEvent_Cancel_1(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _reason);

CAPI void alt_CPlayerConnectEvent_Create_3(struct alt_CPlayerConnectEvent* _p0, struct alt_CPlayerConnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_CAPI_Free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_3_CAPI_Heap(struct alt_CPlayerConnectEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Create_4(struct alt_CPlayerConnectEvent* _p0, struct alt_CPlayerConnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerConnectEvent_CAPI_Free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_4_CAPI_Heap(struct alt_CPlayerConnectEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);

CAPI void alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);


typedef struct alt_CPlayerDisconnectEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String reason;
} alt_CPlayerDisconnectEvent;

CAPI void alt_CPlayerDisconnectEvent_CAPI_Free(struct alt_CPlayerDisconnectEvent* ptr);

CAPI struct alt_CPlayerDisconnectEvent* alt_CEvent_to_alt_CPlayerDisconnectEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDisconnectEvent_to_alt_CEvent(struct alt_CPlayerDisconnectEvent* from);

CAPI void alt_CPlayerDisconnectEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerDisconnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_CAPI_Free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerDisconnectEvent_GetType(struct alt_CPlayerDisconnectEvent* _instance);

CAPI _Bool alt_CPlayerDisconnectEvent_WasCancelled(struct alt_CPlayerDisconnectEvent* _instance);

CAPI void alt_CPlayerDisconnectEvent_Cancel(struct alt_CPlayerDisconnectEvent* _instance);

CAPI void alt_CPlayerDisconnectEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerDisconnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_CAPI_Free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_constCEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerDisconnectEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _reason, struct alt_CPlayerDisconnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_CAPI_Free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _reason);

CAPI void alt_CPlayerDisconnectEvent_GetTarget(struct alt_CPlayerDisconnectEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDisconnectEvent_GetTarget_CAPI_Heap(struct alt_CPlayerDisconnectEvent* _instance);

CAPI void alt_CPlayerDisconnectEvent_GetReason(struct alt_CPlayerDisconnectEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CPlayerDisconnectEvent_GetReason_CAPI_Heap(struct alt_CPlayerDisconnectEvent* _instance);

CAPI void alt_CPlayerDisconnectEvent_Create_3(struct alt_CPlayerDisconnectEvent* _p0, struct alt_CPlayerDisconnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_CAPI_Free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_3_CAPI_Heap(struct alt_CPlayerDisconnectEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Create_4(struct alt_CPlayerDisconnectEvent* _p0, struct alt_CPlayerDisconnectEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_CAPI_Free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_4_CAPI_Heap(struct alt_CPlayerDisconnectEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);

CAPI void alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);


typedef struct alt_CPlayerDamageEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_RefBase_RefStore_IEntity attacker;
    unsigned short damage;
    unsigned int weapon;
} alt_CPlayerDamageEvent;

CAPI void alt_CPlayerDamageEvent_CAPI_Free(struct alt_CPlayerDamageEvent* ptr);

CAPI struct alt_CPlayerDamageEvent* alt_CEvent_to_alt_CPlayerDamageEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDamageEvent_to_alt_CEvent(struct alt_CPlayerDamageEvent* from);

CAPI void alt_CPlayerDamageEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_CAPI_Free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerDamageEvent_GetType(struct alt_CPlayerDamageEvent* _instance);

CAPI _Bool alt_CPlayerDamageEvent_WasCancelled(struct alt_CPlayerDamageEvent* _instance);

CAPI void alt_CPlayerDamageEvent_Cancel(struct alt_CPlayerDamageEvent* _instance);

CAPI void alt_CPlayerDamageEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_CAPI_Free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_constCEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerDamageEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _attacker, unsigned short _damage, unsigned int _weapon, struct alt_CPlayerDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_CAPI_Free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _attacker, unsigned short _damage, unsigned int _weapon);

CAPI void alt_CPlayerDamageEvent_GetTarget(struct alt_CPlayerDamageEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDamageEvent_GetTarget_CAPI_Heap(struct alt_CPlayerDamageEvent* _instance);

CAPI void alt_CPlayerDamageEvent_GetAttacker(struct alt_CPlayerDamageEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CPlayerDamageEvent_GetAttacker_CAPI_Heap(struct alt_CPlayerDamageEvent* _instance);

CAPI unsigned short alt_CPlayerDamageEvent_GetDamage(struct alt_CPlayerDamageEvent* _instance);

CAPI unsigned int alt_CPlayerDamageEvent_GetWeapon(struct alt_CPlayerDamageEvent* _instance);

CAPI void alt_CPlayerDamageEvent_Create_3(struct alt_CPlayerDamageEvent* _p0, struct alt_CPlayerDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_CAPI_Free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_3_CAPI_Heap(struct alt_CPlayerDamageEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Create_4(struct alt_CPlayerDamageEvent* _p0, struct alt_CPlayerDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDamageEvent_CAPI_Free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_4_CAPI_Heap(struct alt_CPlayerDamageEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0);

CAPI void alt_CPlayerDamageEvent_Assign_CPlayerDamageEventRefRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0);


typedef struct alt_CPlayerDeathEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_RefBase_RefStore_IEntity killer;
    unsigned int weapon;
} alt_CPlayerDeathEvent;

CAPI void alt_CPlayerDeathEvent_CAPI_Free(struct alt_CPlayerDeathEvent* ptr);

CAPI struct alt_CPlayerDeathEvent* alt_CEvent_to_alt_CPlayerDeathEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDeathEvent_to_alt_CEvent(struct alt_CPlayerDeathEvent* from);

CAPI void alt_CPlayerDeathEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerDeathEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_CAPI_Free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerDeathEvent_GetType(struct alt_CPlayerDeathEvent* _instance);

CAPI _Bool alt_CPlayerDeathEvent_WasCancelled(struct alt_CPlayerDeathEvent* _instance);

CAPI void alt_CPlayerDeathEvent_Cancel(struct alt_CPlayerDeathEvent* _instance);

CAPI void alt_CPlayerDeathEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerDeathEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_CAPI_Free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_constCEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerDeathEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _killer, unsigned int _weapon, struct alt_CPlayerDeathEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_CAPI_Free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _killer, unsigned int _weapon);

CAPI void alt_CPlayerDeathEvent_GetTarget(struct alt_CPlayerDeathEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDeathEvent_GetTarget_CAPI_Heap(struct alt_CPlayerDeathEvent* _instance);

CAPI void alt_CPlayerDeathEvent_GetKiller(struct alt_CPlayerDeathEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CPlayerDeathEvent_GetKiller_CAPI_Heap(struct alt_CPlayerDeathEvent* _instance);

CAPI unsigned int alt_CPlayerDeathEvent_GetWeapon(struct alt_CPlayerDeathEvent* _instance);

CAPI void alt_CPlayerDeathEvent_Create_3(struct alt_CPlayerDeathEvent* _p0, struct alt_CPlayerDeathEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_CAPI_Free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_3_CAPI_Heap(struct alt_CPlayerDeathEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Create_4(struct alt_CPlayerDeathEvent* _p0, struct alt_CPlayerDeathEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerDeathEvent_CAPI_Free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_4_CAPI_Heap(struct alt_CPlayerDeathEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0);

CAPI void alt_CPlayerDeathEvent_Assign_CPlayerDeathEventRefRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0);


typedef struct alt_CColShapeEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IColShape target;
    struct alt_RefBase_RefStore_IEntity entity;
    _Bool state;
} alt_CColShapeEvent;

CAPI void alt_CColShapeEvent_CAPI_Free(struct alt_CColShapeEvent* ptr);

CAPI struct alt_CColShapeEvent* alt_CEvent_to_alt_CColShapeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CColShapeEvent_to_alt_CEvent(struct alt_CColShapeEvent* from);

CAPI void alt_CColShapeEvent_Create(alt_CEvent_Type _type, struct alt_CColShapeEvent* _returnValue);

// Return ptr must be manually freed with alt_CColShapeEvent_CAPI_Free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CColShapeEvent_GetType(struct alt_CColShapeEvent* _instance);

CAPI _Bool alt_CColShapeEvent_WasCancelled(struct alt_CColShapeEvent* _instance);

CAPI void alt_CColShapeEvent_Cancel(struct alt_CColShapeEvent* _instance);

CAPI void alt_CColShapeEvent_Create_1(struct alt_CEvent* _p0, struct alt_CColShapeEvent* _returnValue);

// Return ptr must be manually freed with alt_CColShapeEvent_CAPI_Free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_constCEventRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CColShapeEvent_Create_2(struct alt_RefBase_RefStore_IColShape* _target, struct alt_RefBase_RefStore_IEntity* _entity, _Bool _state, struct alt_CColShapeEvent* _returnValue);

// Return ptr must be manually freed with alt_CColShapeEvent_CAPI_Free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IColShape* _target, struct alt_RefBase_RefStore_IEntity* _entity, _Bool _state);

CAPI void alt_CColShapeEvent_GetTarget(struct alt_CColShapeEvent* _instance, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_CColShapeEvent_GetTarget_CAPI_Heap(struct alt_CColShapeEvent* _instance);

CAPI void alt_CColShapeEvent_GetEntity(struct alt_CColShapeEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CColShapeEvent_GetEntity_CAPI_Heap(struct alt_CColShapeEvent* _instance);

CAPI _Bool alt_CColShapeEvent_GetState(struct alt_CColShapeEvent* _instance);

CAPI void alt_CColShapeEvent_Create_3(struct alt_CColShapeEvent* _p0, struct alt_CColShapeEvent* _returnValue);

// Return ptr must be manually freed with alt_CColShapeEvent_CAPI_Free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_3_CAPI_Heap(struct alt_CColShapeEvent* _p0);

CAPI void alt_CColShapeEvent_Create_4(struct alt_CColShapeEvent* _p0, struct alt_CColShapeEvent* _returnValue);

// Return ptr must be manually freed with alt_CColShapeEvent_CAPI_Free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_4_CAPI_Heap(struct alt_CColShapeEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_constCColShapeEventRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0);

CAPI void alt_CColShapeEvent_Assign_CColShapeEventRefRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0);


typedef struct alt_CPlayerEnterVehicleEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char seat;
} alt_CPlayerEnterVehicleEvent;

CAPI void alt_CPlayerEnterVehicleEvent_CAPI_Free(struct alt_CPlayerEnterVehicleEvent* ptr);

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CEvent_to_alt_CPlayerEnterVehicleEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerEnterVehicleEvent_to_alt_CEvent(struct alt_CPlayerEnterVehicleEvent* from);

CAPI void alt_CPlayerEnterVehicleEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerEnterVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerEnterVehicleEvent_GetType(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI _Bool alt_CPlayerEnterVehicleEvent_WasCancelled(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI void alt_CPlayerEnterVehicleEvent_Cancel(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI void alt_CPlayerEnterVehicleEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerEnterVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerEnterVehicleEvent_Create_2(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat, struct alt_CPlayerEnterVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat);

CAPI void alt_CPlayerEnterVehicleEvent_GetTarget(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerEnterVehicleEvent_GetTarget_CAPI_Heap(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI void alt_CPlayerEnterVehicleEvent_GetPlayer(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerEnterVehicleEvent_GetPlayer_CAPI_Heap(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI unsigned char alt_CPlayerEnterVehicleEvent_GetSeat(struct alt_CPlayerEnterVehicleEvent* _instance);

CAPI void alt_CPlayerEnterVehicleEvent_Create_3(struct alt_CPlayerEnterVehicleEvent* _p0, struct alt_CPlayerEnterVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_3_CAPI_Heap(struct alt_CPlayerEnterVehicleEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Create_4(struct alt_CPlayerEnterVehicleEvent* _p0, struct alt_CPlayerEnterVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_4_CAPI_Heap(struct alt_CPlayerEnterVehicleEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0);

CAPI void alt_CPlayerEnterVehicleEvent_Assign_CPlayerEnterVehicleEventRefRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0);


typedef struct alt_CPlayerLeaveVehicleEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char seat;
} alt_CPlayerLeaveVehicleEvent;

CAPI void alt_CPlayerLeaveVehicleEvent_CAPI_Free(struct alt_CPlayerLeaveVehicleEvent* ptr);

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CEvent_to_alt_CPlayerLeaveVehicleEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerLeaveVehicleEvent_to_alt_CEvent(struct alt_CPlayerLeaveVehicleEvent* from);

CAPI void alt_CPlayerLeaveVehicleEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerLeaveVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerLeaveVehicleEvent_GetType(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI _Bool alt_CPlayerLeaveVehicleEvent_WasCancelled(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI void alt_CPlayerLeaveVehicleEvent_Cancel(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI void alt_CPlayerLeaveVehicleEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerLeaveVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerLeaveVehicleEvent_Create_2(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat, struct alt_CPlayerLeaveVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat);

CAPI void alt_CPlayerLeaveVehicleEvent_GetTarget(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerLeaveVehicleEvent_GetTarget_CAPI_Heap(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI void alt_CPlayerLeaveVehicleEvent_GetPlayer(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerLeaveVehicleEvent_GetPlayer_CAPI_Heap(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI unsigned char alt_CPlayerLeaveVehicleEvent_GetSeat(struct alt_CPlayerLeaveVehicleEvent* _instance);

CAPI void alt_CPlayerLeaveVehicleEvent_Create_3(struct alt_CPlayerLeaveVehicleEvent* _p0, struct alt_CPlayerLeaveVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_3_CAPI_Heap(struct alt_CPlayerLeaveVehicleEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Create_4(struct alt_CPlayerLeaveVehicleEvent* _p0, struct alt_CPlayerLeaveVehicleEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_CAPI_Free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_4_CAPI_Heap(struct alt_CPlayerLeaveVehicleEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0);

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_CPlayerLeaveVehicleEventRefRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0);


typedef struct alt_CPlayerChangeVehicleSeatEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char oldSeat;
    unsigned char newSeat;
} alt_CPlayerChangeVehicleSeatEvent;

CAPI void alt_CPlayerChangeVehicleSeatEvent_CAPI_Free(struct alt_CPlayerChangeVehicleSeatEvent* ptr);

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CEvent_to_alt_CPlayerChangeVehicleSeatEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerChangeVehicleSeatEvent_to_alt_CEvent(struct alt_CPlayerChangeVehicleSeatEvent* from);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Create(alt_CEvent_Type _type, struct alt_CPlayerChangeVehicleSeatEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_CAPI_Free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CPlayerChangeVehicleSeatEvent_GetType(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI _Bool alt_CPlayerChangeVehicleSeatEvent_WasCancelled(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Cancel(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Create_1(struct alt_CEvent* _p0, struct alt_CPlayerChangeVehicleSeatEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_CAPI_Free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CPlayerChangeVehicleSeatEvent_Create_2(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _oldSeat, unsigned char _newSeat, struct alt_CPlayerChangeVehicleSeatEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_CAPI_Free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _oldSeat, unsigned char _newSeat);

CAPI void alt_CPlayerChangeVehicleSeatEvent_GetTarget(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerChangeVehicleSeatEvent_GetTarget_CAPI_Heap(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI void alt_CPlayerChangeVehicleSeatEvent_GetPlayer(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerChangeVehicleSeatEvent_GetPlayer_CAPI_Heap(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Create_3(struct alt_CPlayerChangeVehicleSeatEvent* _p0, struct alt_CPlayerChangeVehicleSeatEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_CAPI_Free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_3_CAPI_Heap(struct alt_CPlayerChangeVehicleSeatEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Create_4(struct alt_CPlayerChangeVehicleSeatEvent* _p0, struct alt_CPlayerChangeVehicleSeatEvent* _returnValue);

// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_CAPI_Free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_4_CAPI_Heap(struct alt_CPlayerChangeVehicleSeatEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0);

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_CPlayerChangeVehicleSeatEventRefRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0);


typedef struct alt_CDataNodeReceivedEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_String json;
} alt_CDataNodeReceivedEvent;

CAPI void alt_CDataNodeReceivedEvent_CAPI_Free(struct alt_CDataNodeReceivedEvent* ptr);

CAPI struct alt_CDataNodeReceivedEvent* alt_CEvent_to_alt_CDataNodeReceivedEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CDataNodeReceivedEvent_to_alt_CEvent(struct alt_CDataNodeReceivedEvent* from);

CAPI void alt_CDataNodeReceivedEvent_Create(alt_CEvent_Type _type, struct alt_CDataNodeReceivedEvent* _returnValue);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_CAPI_Free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CDataNodeReceivedEvent_GetType(struct alt_CDataNodeReceivedEvent* _instance);

CAPI _Bool alt_CDataNodeReceivedEvent_WasCancelled(struct alt_CDataNodeReceivedEvent* _instance);

CAPI void alt_CDataNodeReceivedEvent_Cancel(struct alt_CDataNodeReceivedEvent* _instance);

CAPI void alt_CDataNodeReceivedEvent_Create_1(struct alt_CEvent* _p0, struct alt_CDataNodeReceivedEvent* _returnValue);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_CAPI_Free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_constCEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CDataNodeReceivedEvent_Create_2(struct alt_StringView* _name, struct alt_StringView* _logJson, struct alt_CDataNodeReceivedEvent* _returnValue);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_CAPI_Free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_2_CAPI_Heap(struct alt_StringView* _name, struct alt_StringView* _logJson);

CAPI void alt_CDataNodeReceivedEvent_GetName(struct alt_CDataNodeReceivedEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetName_CAPI_Heap(struct alt_CDataNodeReceivedEvent* _instance);

CAPI void alt_CDataNodeReceivedEvent_GetJson(struct alt_CDataNodeReceivedEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetJson_CAPI_Heap(struct alt_CDataNodeReceivedEvent* _instance);

CAPI void alt_CDataNodeReceivedEvent_Create_3(struct alt_CDataNodeReceivedEvent* _p0, struct alt_CDataNodeReceivedEvent* _returnValue);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_CAPI_Free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_3_CAPI_Heap(struct alt_CDataNodeReceivedEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Create_4(struct alt_CDataNodeReceivedEvent* _p0, struct alt_CDataNodeReceivedEvent* _returnValue);

// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_CAPI_Free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_4_CAPI_Heap(struct alt_CDataNodeReceivedEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);

CAPI void alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);


typedef struct alt_CRemoveEntityEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IEntity target;
} alt_CRemoveEntityEvent;

CAPI void alt_CRemoveEntityEvent_CAPI_Free(struct alt_CRemoveEntityEvent* ptr);

CAPI struct alt_CRemoveEntityEvent* alt_CEvent_to_alt_CRemoveEntityEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CRemoveEntityEvent_to_alt_CEvent(struct alt_CRemoveEntityEvent* from);

CAPI void alt_CRemoveEntityEvent_Create(alt_CEvent_Type _type, struct alt_CRemoveEntityEvent* _returnValue);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_CAPI_Free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CRemoveEntityEvent_GetType(struct alt_CRemoveEntityEvent* _instance);

CAPI _Bool alt_CRemoveEntityEvent_WasCancelled(struct alt_CRemoveEntityEvent* _instance);

CAPI void alt_CRemoveEntityEvent_Cancel(struct alt_CRemoveEntityEvent* _instance);

CAPI void alt_CRemoveEntityEvent_Create_1(struct alt_CEvent* _p0, struct alt_CRemoveEntityEvent* _returnValue);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_CAPI_Free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_constCEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CRemoveEntityEvent_Create_2(struct alt_RefBase_RefStore_IEntity* _target, struct alt_CRemoveEntityEvent* _returnValue);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_CAPI_Free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IEntity* _target);

CAPI void alt_CRemoveEntityEvent_GetEntity(struct alt_CRemoveEntityEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CRemoveEntityEvent_GetEntity_CAPI_Heap(struct alt_CRemoveEntityEvent* _instance);

CAPI void alt_CRemoveEntityEvent_Create_3(struct alt_CRemoveEntityEvent* _p0, struct alt_CRemoveEntityEvent* _returnValue);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_CAPI_Free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_3_CAPI_Heap(struct alt_CRemoveEntityEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Create_4(struct alt_CRemoveEntityEvent* _p0, struct alt_CRemoveEntityEvent* _returnValue);

// Return ptr must be manually freed with alt_CRemoveEntityEvent_CAPI_Free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_4_CAPI_Heap(struct alt_CRemoveEntityEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0);

CAPI void alt_CRemoveEntityEvent_Assign_CRemoveEntityEventRefRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0);


typedef struct alt_CConsoleCommandEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_StringView name;
    struct alt_Array_StringView args;
} alt_CConsoleCommandEvent;

CAPI void alt_CConsoleCommandEvent_CAPI_Free(struct alt_CConsoleCommandEvent* ptr);

CAPI struct alt_CConsoleCommandEvent* alt_CEvent_to_alt_CConsoleCommandEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CConsoleCommandEvent_to_alt_CEvent(struct alt_CConsoleCommandEvent* from);

CAPI void alt_CConsoleCommandEvent_Create(alt_CEvent_Type _type, struct alt_CConsoleCommandEvent* _returnValue);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_CAPI_Free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CConsoleCommandEvent_GetType(struct alt_CConsoleCommandEvent* _instance);

CAPI _Bool alt_CConsoleCommandEvent_WasCancelled(struct alt_CConsoleCommandEvent* _instance);

CAPI void alt_CConsoleCommandEvent_Cancel(struct alt_CConsoleCommandEvent* _instance);

CAPI void alt_CConsoleCommandEvent_Create_1(struct alt_CEvent* _p0, struct alt_CConsoleCommandEvent* _returnValue);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_CAPI_Free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_constCEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CConsoleCommandEvent_Create_2(struct alt_StringView* _name, struct alt_Array_StringView* _args, struct alt_CConsoleCommandEvent* _returnValue);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_CAPI_Free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_2_CAPI_Heap(struct alt_StringView* _name, struct alt_Array_StringView* _args);

CAPI void alt_CConsoleCommandEvent_GetName(struct alt_CConsoleCommandEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CConsoleCommandEvent_GetName_CAPI_Heap(struct alt_CConsoleCommandEvent* _instance);

CAPI struct alt_Array_StringView* alt_CConsoleCommandEvent_GetArgs(struct alt_CConsoleCommandEvent* _instance);

CAPI void alt_CConsoleCommandEvent_Create_3(struct alt_CConsoleCommandEvent* _p0, struct alt_CConsoleCommandEvent* _returnValue);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_CAPI_Free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_3_CAPI_Heap(struct alt_CConsoleCommandEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Create_4(struct alt_CConsoleCommandEvent* _p0, struct alt_CConsoleCommandEvent* _returnValue);

// Return ptr must be manually freed with alt_CConsoleCommandEvent_CAPI_Free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_4_CAPI_Heap(struct alt_CConsoleCommandEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);

CAPI void alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);


typedef enum alt_CWeaponDamageEvent_BodyPart {
    ALT_CWEAPONDAMAGEEVENT_BODYPART_PELVIS = 0,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_HIP = 1,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_LEG = 2,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_FOOT = 3,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_HIP = 4,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_LEG = 5,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_FOOT = 6,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LOWER_TORSO = 7,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UPPER_TORSO = 8,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_CHEST = 9,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNDER_NECK = 10,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_SHOULDER = 11,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_UPPER_ARM = 12,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_ELBROW = 13,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_WRIST = 14,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_SHOULDER = 15,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_UPPER_ARM = 16,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_ELBROW = 17,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_WRIST = 18,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_NECK = 19,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_HEAD = 20,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNKNOWN = 255
};

typedef struct alt_CWeaponDamageEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer source;
    struct alt_RefBase_RefStore_IEntity target;
    unsigned int weaponHash;
    unsigned short damageValue;
    struct alt_Vector_float_3_VectorLayout_float_3 shotOffset;
    alt_CWeaponDamageEvent_BodyPart bodyPart;
} alt_CWeaponDamageEvent;

CAPI void alt_CWeaponDamageEvent_CAPI_Free(struct alt_CWeaponDamageEvent* ptr);

CAPI struct alt_CWeaponDamageEvent* alt_CEvent_to_alt_CWeaponDamageEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CWeaponDamageEvent_to_alt_CEvent(struct alt_CWeaponDamageEvent* from);

CAPI void alt_CWeaponDamageEvent_Create(alt_CEvent_Type _type, struct alt_CWeaponDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CWeaponDamageEvent_CAPI_Free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CWeaponDamageEvent_GetType(struct alt_CWeaponDamageEvent* _instance);

CAPI _Bool alt_CWeaponDamageEvent_WasCancelled(struct alt_CWeaponDamageEvent* _instance);

CAPI void alt_CWeaponDamageEvent_Cancel(struct alt_CWeaponDamageEvent* _instance);

CAPI void alt_CWeaponDamageEvent_Create_1(struct alt_CEvent* _p0, struct alt_CWeaponDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CWeaponDamageEvent_CAPI_Free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CWeaponDamageEvent_Assign_constCEventRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CWeaponDamageEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _source, struct alt_RefBase_RefStore_IEntity* _target, unsigned int _weaponHash, unsigned short _damageValue, struct alt_Vector_float_3_VectorLayout_float_3* _shotOffset, alt_CWeaponDamageEvent_BodyPart _bodyPart, struct alt_CWeaponDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CWeaponDamageEvent_CAPI_Free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _source, struct alt_RefBase_RefStore_IEntity* _target, unsigned int _weaponHash, unsigned short _damageValue, struct alt_Vector_float_3_VectorLayout_float_3* _shotOffset, alt_CWeaponDamageEvent_BodyPart _bodyPart);

CAPI void alt_CWeaponDamageEvent_GetSource(struct alt_CWeaponDamageEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CWeaponDamageEvent_GetSource_CAPI_Heap(struct alt_CWeaponDamageEvent* _instance);

CAPI void alt_CWeaponDamageEvent_GetTarget(struct alt_CWeaponDamageEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CWeaponDamageEvent_GetTarget_CAPI_Heap(struct alt_CWeaponDamageEvent* _instance);

CAPI unsigned int alt_CWeaponDamageEvent_GetWeaponHash(struct alt_CWeaponDamageEvent* _instance);

CAPI unsigned short alt_CWeaponDamageEvent_GetDamageValue(struct alt_CWeaponDamageEvent* _instance);

CAPI void alt_CWeaponDamageEvent_GetShotOffset(struct alt_CWeaponDamageEvent* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_CAPI_Free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_CWeaponDamageEvent_GetShotOffset_CAPI_Heap(struct alt_CWeaponDamageEvent* _instance);

CAPI alt_CWeaponDamageEvent_BodyPart alt_CWeaponDamageEvent_GetBodyPart(struct alt_CWeaponDamageEvent* _instance);

CAPI void alt_CWeaponDamageEvent_Create_3(struct alt_CWeaponDamageEvent* _p0, struct alt_CWeaponDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CWeaponDamageEvent_CAPI_Free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_3_CAPI_Heap(struct alt_CWeaponDamageEvent* _p0);

CAPI void alt_CWeaponDamageEvent_Create_4(struct alt_CWeaponDamageEvent* _p0, struct alt_CWeaponDamageEvent* _returnValue);

// Return ptr must be manually freed with alt_CWeaponDamageEvent_CAPI_Free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_4_CAPI_Heap(struct alt_CWeaponDamageEvent* _p0);

CAPI void alt_CWeaponDamageEvent_Assign_constCWeaponDamageEventRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CWeaponDamageEvent* _p0);

CAPI void alt_CWeaponDamageEvent_Assign_CWeaponDamageEventRefRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CWeaponDamageEvent* _p0);


typedef enum alt_CExplosionEvent_ExplosionType {
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADE = 0,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADELAUNCHER = 1,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_STICKYBOMB = 2,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_MOLOTOV = 3,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_ROCKET = 4,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKSHELL = 5,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_HI_OCTANE = 6,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_CAR = 7,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE = 8,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PETROL_PUMP = 9,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BIKE = 10,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_STEAM = 11,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME = 12,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_WATER_HYDRANT = 13,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_GAS_CANISTER = 14,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BOAT = 15,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SHIP_DESTROY = 16,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRUCK = 17,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BULLET = 18,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADELAUNCHER = 19,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADE = 20,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BZGAS = 21,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FLARE = 22,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_CANISTER = 23,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_EXTINGUISHER = 24,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROGRAMMABLEAR = 25,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRAIN = 26,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BARREL = 27,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROPANE = 28,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BLIMP = 29,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME_EXPLODE = 30,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKER = 31,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE_ROCKET = 32,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VEHICLE_BULLET = 33,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_TANK = 34,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FIREWORK = 35,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SNOWBALL = 36,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROXMINE = 37,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VALKYRIE_CANNON = 38,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_UNKNOWN = 255
};

typedef struct alt_CExplosionEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer source;
    alt_CExplosionEvent_ExplosionType explosionType;
    struct alt_Vector_float_3_PointLayout position;
    unsigned int explosionFX;
} alt_CExplosionEvent;

CAPI void alt_CExplosionEvent_CAPI_Free(struct alt_CExplosionEvent* ptr);

CAPI struct alt_CExplosionEvent* alt_CEvent_to_alt_CExplosionEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CExplosionEvent_to_alt_CEvent(struct alt_CExplosionEvent* from);

CAPI void alt_CExplosionEvent_Create(alt_CEvent_Type _type, struct alt_CExplosionEvent* _returnValue);

// Return ptr must be manually freed with alt_CExplosionEvent_CAPI_Free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CExplosionEvent_GetType(struct alt_CExplosionEvent* _instance);

CAPI _Bool alt_CExplosionEvent_WasCancelled(struct alt_CExplosionEvent* _instance);

CAPI void alt_CExplosionEvent_Cancel(struct alt_CExplosionEvent* _instance);

CAPI void alt_CExplosionEvent_Create_1(struct alt_CEvent* _p0, struct alt_CExplosionEvent* _returnValue);

// Return ptr must be manually freed with alt_CExplosionEvent_CAPI_Free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CExplosionEvent_Assign_constCEventRef(struct alt_CExplosionEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CExplosionEvent_Create_2(struct alt_RefBase_RefStore_IPlayer* _source, alt_CExplosionEvent_ExplosionType _explosionType, struct alt_Vector_float_3_PointLayout* _position, unsigned int _explosionFX, struct alt_CExplosionEvent* _returnValue);

// Return ptr must be manually freed with alt_CExplosionEvent_CAPI_Free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IPlayer* _source, alt_CExplosionEvent_ExplosionType _explosionType, struct alt_Vector_float_3_PointLayout* _position, unsigned int _explosionFX);

CAPI void alt_CExplosionEvent_GetSource(struct alt_CExplosionEvent* _instance, struct alt_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CExplosionEvent_GetSource_CAPI_Heap(struct alt_CExplosionEvent* _instance);

CAPI alt_CExplosionEvent_ExplosionType alt_CExplosionEvent_GetExplosionType(struct alt_CExplosionEvent* _instance);

CAPI void alt_CExplosionEvent_GetPosition(struct alt_CExplosionEvent* _instance, struct alt_Vector_float_3_PointLayout* _returnValue);

// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_CAPI_Free()
CAPI struct alt_Vector_float_3_PointLayout* alt_CExplosionEvent_GetPosition_CAPI_Heap(struct alt_CExplosionEvent* _instance);

CAPI unsigned int alt_CExplosionEvent_GetExplosionFX(struct alt_CExplosionEvent* _instance);

CAPI void alt_CExplosionEvent_Create_3(struct alt_CExplosionEvent* _p0, struct alt_CExplosionEvent* _returnValue);

// Return ptr must be manually freed with alt_CExplosionEvent_CAPI_Free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_3_CAPI_Heap(struct alt_CExplosionEvent* _p0);

CAPI void alt_CExplosionEvent_Create_4(struct alt_CExplosionEvent* _p0, struct alt_CExplosionEvent* _returnValue);

// Return ptr must be manually freed with alt_CExplosionEvent_CAPI_Free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_4_CAPI_Heap(struct alt_CExplosionEvent* _p0);

CAPI void alt_CExplosionEvent_Assign_constCExplosionEventRef(struct alt_CExplosionEvent* _instance, struct alt_CExplosionEvent* _p0);

CAPI void alt_CExplosionEvent_Assign_CExplosionEventRefRef(struct alt_CExplosionEvent* _instance, struct alt_CExplosionEvent* _p0);


typedef struct alt_IResource {
    void* vtable;
} alt_IResource;

CAPI struct alt_IScriptRuntime* alt_IResource_GetRuntime(struct alt_IResource* _instance);

CAPI struct alt_IResource_Impl* alt_IResource_GetImpl(struct alt_IResource* _instance);

CAPI _Bool alt_IResource_IsStarted(struct alt_IResource* _instance);

CAPI void alt_IResource_GetType(struct alt_IResource* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IResource_GetType_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_GetName(struct alt_IResource* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IResource_GetName_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_GetPath(struct alt_IResource* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IResource_GetPath_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_GetMain(struct alt_IResource* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_IResource_GetMain_CAPI_Heap(struct alt_IResource* _instance);

CAPI struct alt_IPackage* alt_IResource_GetPackage(struct alt_IResource* _instance);

CAPI void alt_IResource_GetExports(struct alt_IResource* _instance, struct alt_RefBase_RefStore_IMValueDict* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDict_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueDict* alt_IResource_GetExports_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_GetDependencies(struct alt_IResource* _instance, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with constArray_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_IResource_GetDependencies_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_GetDependants(struct alt_IResource* _instance, struct alt_Array_StringView* _returnValue);

// Return ptr must be manually freed with constArray_StringView_CAPI_Free()
CAPI struct alt_Array_StringView* alt_IResource_GetDependants_CAPI_Heap(struct alt_IResource* _instance);

CAPI void alt_IResource_SetExports(struct alt_IResource* _instance, struct alt_RefBase_RefStore_IMValueDict* exports);

CAPI void alt_IResource_Assign_constIResourceRef(struct alt_IResource* _instance, struct alt_IResource* _p0);


typedef struct alt_IResource_CreationInfo {
    struct alt_String type;
    struct alt_String name;
    struct alt_String main;
    struct alt_IPackage* pkg;
} alt_IResource_CreationInfo;

CAPI void alt_IResource_CreationInfo_CAPI_Free(struct alt_IResource_CreationInfo* ptr);

CAPI void alt_IResource_CreationInfo_Create(struct alt_IResource_CreationInfo* _p0, struct alt_IResource_CreationInfo* _returnValue);

// Return ptr must be manually freed with alt_IResource_CreationInfo_CAPI_Free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create_CAPI_Heap(struct alt_IResource_CreationInfo* _p0);

CAPI void alt_IResource_CreationInfo_Create_1(struct alt_IResource_CreationInfo* _p0, struct alt_IResource_CreationInfo* _returnValue);

// Return ptr must be manually freed with alt_IResource_CreationInfo_CAPI_Free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create_1_CAPI_Heap(struct alt_IResource_CreationInfo* _p0);

CAPI void alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef(struct alt_IResource_CreationInfo* _instance, struct alt_IResource_CreationInfo* _p0);


typedef struct alt_IResource_Impl {
    void* vtable;
} alt_IResource_Impl;

CAPI void alt_IResource_Impl_CAPI_Free(struct alt_IResource_Impl* ptr);

CAPI _Bool alt_IResource_Impl_MakeClient(struct alt_IResource_Impl* _instance, struct alt_IResource_CreationInfo* info, struct alt_Array_String* files);

CAPI _Bool alt_IResource_Impl_Start(struct alt_IResource_Impl* _instance);

CAPI _Bool alt_IResource_Impl_Stop(struct alt_IResource_Impl* _instance);

CAPI _Bool alt_IResource_Impl_OnEvent(struct alt_IResource_Impl* _instance, struct alt_CEvent* ev);

CAPI void alt_IResource_Impl_OnTick(struct alt_IResource_Impl* _instance);

CAPI void alt_IResource_Impl_OnCreateBaseObject(struct alt_IResource_Impl* _instance, struct alt_RefBase_RefStore_IBaseObject* object);

CAPI void alt_IResource_Impl_OnRemoveBaseObject(struct alt_IResource_Impl* _instance, struct alt_RefBase_RefStore_IBaseObject* object);

CAPI void alt_IResource_Impl_Assign_constIResource_ImplRef(struct alt_IResource_Impl* _instance, struct alt_IResource_Impl* _p0);


typedef struct alt_CResourceStartEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceStartEvent;

CAPI void alt_CResourceStartEvent_CAPI_Free(struct alt_CResourceStartEvent* ptr);

CAPI struct alt_CResourceStartEvent* alt_CEvent_to_alt_CResourceStartEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceStartEvent_to_alt_CEvent(struct alt_CResourceStartEvent* from);

CAPI void alt_CResourceStartEvent_Create(alt_CEvent_Type _type, struct alt_CResourceStartEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStartEvent_CAPI_Free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CResourceStartEvent_GetType(struct alt_CResourceStartEvent* _instance);

CAPI _Bool alt_CResourceStartEvent_WasCancelled(struct alt_CResourceStartEvent* _instance);

CAPI void alt_CResourceStartEvent_Cancel(struct alt_CResourceStartEvent* _instance);

CAPI void alt_CResourceStartEvent_Create_1(struct alt_CEvent* _p0, struct alt_CResourceStartEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStartEvent_CAPI_Free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CResourceStartEvent_Assign_constCEventRef(struct alt_CResourceStartEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CResourceStartEvent_Create_2(struct alt_IResource* _resource, struct alt_CResourceStartEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStartEvent_CAPI_Free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_2_CAPI_Heap(struct alt_IResource* _resource);

CAPI struct alt_IResource* alt_CResourceStartEvent_GetResource(struct alt_CResourceStartEvent* _instance);

CAPI void alt_CResourceStartEvent_Create_3(struct alt_CResourceStartEvent* _p0, struct alt_CResourceStartEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStartEvent_CAPI_Free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_3_CAPI_Heap(struct alt_CResourceStartEvent* _p0);

CAPI void alt_CResourceStartEvent_Create_4(struct alt_CResourceStartEvent* _p0, struct alt_CResourceStartEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStartEvent_CAPI_Free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_4_CAPI_Heap(struct alt_CResourceStartEvent* _p0);

CAPI void alt_CResourceStartEvent_Assign_constCResourceStartEventRef(struct alt_CResourceStartEvent* _instance, struct alt_CResourceStartEvent* _p0);

CAPI void alt_CResourceStartEvent_Assign_CResourceStartEventRefRef(struct alt_CResourceStartEvent* _instance, struct alt_CResourceStartEvent* _p0);


typedef struct alt_CResourceStopEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceStopEvent;

CAPI void alt_CResourceStopEvent_CAPI_Free(struct alt_CResourceStopEvent* ptr);

CAPI struct alt_CResourceStopEvent* alt_CEvent_to_alt_CResourceStopEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceStopEvent_to_alt_CEvent(struct alt_CResourceStopEvent* from);

CAPI void alt_CResourceStopEvent_Create(alt_CEvent_Type _type, struct alt_CResourceStopEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStopEvent_CAPI_Free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CResourceStopEvent_GetType(struct alt_CResourceStopEvent* _instance);

CAPI _Bool alt_CResourceStopEvent_WasCancelled(struct alt_CResourceStopEvent* _instance);

CAPI void alt_CResourceStopEvent_Cancel(struct alt_CResourceStopEvent* _instance);

CAPI void alt_CResourceStopEvent_Create_1(struct alt_CEvent* _p0, struct alt_CResourceStopEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStopEvent_CAPI_Free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CResourceStopEvent_Assign_constCEventRef(struct alt_CResourceStopEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CResourceStopEvent_Create_2(struct alt_IResource* _resource, struct alt_CResourceStopEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStopEvent_CAPI_Free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_2_CAPI_Heap(struct alt_IResource* _resource);

CAPI struct alt_IResource* alt_CResourceStopEvent_GetResource(struct alt_CResourceStopEvent* _instance);

CAPI void alt_CResourceStopEvent_Create_3(struct alt_CResourceStopEvent* _p0, struct alt_CResourceStopEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStopEvent_CAPI_Free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_3_CAPI_Heap(struct alt_CResourceStopEvent* _p0);

CAPI void alt_CResourceStopEvent_Create_4(struct alt_CResourceStopEvent* _p0, struct alt_CResourceStopEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceStopEvent_CAPI_Free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_4_CAPI_Heap(struct alt_CResourceStopEvent* _p0);

CAPI void alt_CResourceStopEvent_Assign_constCResourceStopEventRef(struct alt_CResourceStopEvent* _instance, struct alt_CResourceStopEvent* _p0);

CAPI void alt_CResourceStopEvent_Assign_CResourceStopEventRefRef(struct alt_CResourceStopEvent* _instance, struct alt_CResourceStopEvent* _p0);


typedef struct alt_CResourceErrorEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceErrorEvent;

CAPI void alt_CResourceErrorEvent_CAPI_Free(struct alt_CResourceErrorEvent* ptr);

CAPI struct alt_CResourceErrorEvent* alt_CEvent_to_alt_CResourceErrorEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceErrorEvent_to_alt_CEvent(struct alt_CResourceErrorEvent* from);

CAPI void alt_CResourceErrorEvent_Create(alt_CEvent_Type _type, struct alt_CResourceErrorEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceErrorEvent_CAPI_Free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CResourceErrorEvent_GetType(struct alt_CResourceErrorEvent* _instance);

CAPI _Bool alt_CResourceErrorEvent_WasCancelled(struct alt_CResourceErrorEvent* _instance);

CAPI void alt_CResourceErrorEvent_Cancel(struct alt_CResourceErrorEvent* _instance);

CAPI void alt_CResourceErrorEvent_Create_1(struct alt_CEvent* _p0, struct alt_CResourceErrorEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceErrorEvent_CAPI_Free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CResourceErrorEvent_Assign_constCEventRef(struct alt_CResourceErrorEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CResourceErrorEvent_Create_2(struct alt_IResource* _resource, struct alt_CResourceErrorEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceErrorEvent_CAPI_Free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_2_CAPI_Heap(struct alt_IResource* _resource);

CAPI struct alt_IResource* alt_CResourceErrorEvent_GetResource(struct alt_CResourceErrorEvent* _instance);

CAPI void alt_CResourceErrorEvent_Create_3(struct alt_CResourceErrorEvent* _p0, struct alt_CResourceErrorEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceErrorEvent_CAPI_Free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_3_CAPI_Heap(struct alt_CResourceErrorEvent* _p0);

CAPI void alt_CResourceErrorEvent_Create_4(struct alt_CResourceErrorEvent* _p0, struct alt_CResourceErrorEvent* _returnValue);

// Return ptr must be manually freed with alt_CResourceErrorEvent_CAPI_Free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_4_CAPI_Heap(struct alt_CResourceErrorEvent* _p0);

CAPI void alt_CResourceErrorEvent_Assign_constCResourceErrorEventRef(struct alt_CResourceErrorEvent* _instance, struct alt_CResourceErrorEvent* _p0);

CAPI void alt_CResourceErrorEvent_Assign_CResourceErrorEventRefRef(struct alt_CResourceErrorEvent* _instance, struct alt_CResourceErrorEvent* _p0);


typedef struct alt_CSyncedMetaDataChangeEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IEntity target;
    struct alt_String key;
    struct alt_RefBase_RefStore_constIMValue val;
    struct alt_RefBase_RefStore_constIMValue oldVal;
} alt_CSyncedMetaDataChangeEvent;

CAPI void alt_CSyncedMetaDataChangeEvent_CAPI_Free(struct alt_CSyncedMetaDataChangeEvent* ptr);

CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CEvent_to_alt_CSyncedMetaDataChangeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CSyncedMetaDataChangeEvent_to_alt_CEvent(struct alt_CSyncedMetaDataChangeEvent* from);

CAPI void alt_CSyncedMetaDataChangeEvent_Create(alt_CEvent_Type _type, struct alt_CSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CSyncedMetaDataChangeEvent_GetType(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI _Bool alt_CSyncedMetaDataChangeEvent_WasCancelled(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_Cancel(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_Create_1(struct alt_CEvent* _p0, struct alt_CSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CSyncedMetaDataChangeEvent_Assign_constCEventRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CSyncedMetaDataChangeEvent_Create_2(struct alt_RefBase_RefStore_IEntity* _target, struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal, struct alt_CSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IEntity* _target, struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal);

CAPI void alt_CSyncedMetaDataChangeEvent_GetTarget(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CSyncedMetaDataChangeEvent_GetTarget_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_GetKey(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_GetVal(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_GetOldVal(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CSyncedMetaDataChangeEvent_Create_3(struct alt_CSyncedMetaDataChangeEvent* _p0, struct alt_CSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CSyncedMetaDataChangeEvent_Create_4(struct alt_CSyncedMetaDataChangeEvent* _p0, struct alt_CSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(struct alt_CSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CSyncedMetaDataChangeEvent_Assign_constCSyncedMetaDataChangeEventRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CSyncedMetaDataChangeEvent_Assign_CSyncedMetaDataChangeEventRefRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CSyncedMetaDataChangeEvent* _p0);


typedef struct alt_CStreamSyncedMetaDataChangeEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IEntity target;
    struct alt_String key;
    struct alt_RefBase_RefStore_constIMValue val;
    struct alt_RefBase_RefStore_constIMValue oldVal;
} alt_CStreamSyncedMetaDataChangeEvent;

CAPI void alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free(struct alt_CStreamSyncedMetaDataChangeEvent* ptr);

CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CEvent_to_alt_CStreamSyncedMetaDataChangeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CStreamSyncedMetaDataChangeEvent_to_alt_CEvent(struct alt_CStreamSyncedMetaDataChangeEvent* from);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Create(alt_CEvent_Type _type, struct alt_CStreamSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CStreamSyncedMetaDataChangeEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CStreamSyncedMetaDataChangeEvent_GetType(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI _Bool alt_CStreamSyncedMetaDataChangeEvent_WasCancelled(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Cancel(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Create_1(struct alt_CEvent* _p0, struct alt_CStreamSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CStreamSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Assign_constCEventRef(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CStreamSyncedMetaDataChangeEvent_Create_2(struct alt_RefBase_RefStore_IEntity* _target, struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal, struct alt_CStreamSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CStreamSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IEntity* _target, struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_GetTarget(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CStreamSyncedMetaDataChangeEvent_GetTarget_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_GetKey(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CStreamSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_GetVal(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CStreamSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_GetOldVal(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CStreamSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Create_3(struct alt_CStreamSyncedMetaDataChangeEvent* _p0, struct alt_CStreamSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CStreamSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Create_4(struct alt_CStreamSyncedMetaDataChangeEvent* _p0, struct alt_CStreamSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CStreamSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CStreamSyncedMetaDataChangeEvent* alt_CStreamSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(struct alt_CStreamSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Assign_constCStreamSyncedMetaDataChangeEventRef(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_CStreamSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CStreamSyncedMetaDataChangeEvent_Assign_CStreamSyncedMetaDataChangeEventRefRef(struct alt_CStreamSyncedMetaDataChangeEvent* _instance, struct alt_CStreamSyncedMetaDataChangeEvent* _p0);


typedef struct alt_CGlobalMetaDataChangeEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String key;
    struct alt_RefBase_RefStore_constIMValue val;
    struct alt_RefBase_RefStore_constIMValue oldVal;
} alt_CGlobalMetaDataChangeEvent;

CAPI void alt_CGlobalMetaDataChangeEvent_CAPI_Free(struct alt_CGlobalMetaDataChangeEvent* ptr);

CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CEvent_to_alt_CGlobalMetaDataChangeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CGlobalMetaDataChangeEvent_to_alt_CEvent(struct alt_CGlobalMetaDataChangeEvent* from);

CAPI void alt_CGlobalMetaDataChangeEvent_Create(alt_CEvent_Type _type, struct alt_CGlobalMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CGlobalMetaDataChangeEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CGlobalMetaDataChangeEvent_GetType(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI _Bool alt_CGlobalMetaDataChangeEvent_WasCancelled(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalMetaDataChangeEvent_Cancel(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalMetaDataChangeEvent_Create_1(struct alt_CEvent* _p0, struct alt_CGlobalMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CGlobalMetaDataChangeEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CGlobalMetaDataChangeEvent_Assign_constCEventRef(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CGlobalMetaDataChangeEvent_Create_2(struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal, struct alt_CGlobalMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CGlobalMetaDataChangeEvent_Create_2_CAPI_Heap(struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal);

CAPI void alt_CGlobalMetaDataChangeEvent_GetKey(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CGlobalMetaDataChangeEvent_GetKey_CAPI_Heap(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalMetaDataChangeEvent_GetVal(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CGlobalMetaDataChangeEvent_GetVal_CAPI_Heap(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalMetaDataChangeEvent_GetOldVal(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CGlobalMetaDataChangeEvent_GetOldVal_CAPI_Heap(struct alt_CGlobalMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalMetaDataChangeEvent_Create_3(struct alt_CGlobalMetaDataChangeEvent* _p0, struct alt_CGlobalMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CGlobalMetaDataChangeEvent_Create_3_CAPI_Heap(struct alt_CGlobalMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalMetaDataChangeEvent_Create_4(struct alt_CGlobalMetaDataChangeEvent* _p0, struct alt_CGlobalMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalMetaDataChangeEvent* alt_CGlobalMetaDataChangeEvent_Create_4_CAPI_Heap(struct alt_CGlobalMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalMetaDataChangeEvent_Assign_constCGlobalMetaDataChangeEventRef(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_CGlobalMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalMetaDataChangeEvent_Assign_CGlobalMetaDataChangeEventRefRef(struct alt_CGlobalMetaDataChangeEvent* _instance, struct alt_CGlobalMetaDataChangeEvent* _p0);


typedef struct alt_CGlobalSyncedMetaDataChangeEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String key;
    struct alt_RefBase_RefStore_constIMValue val;
    struct alt_RefBase_RefStore_constIMValue oldVal;
} alt_CGlobalSyncedMetaDataChangeEvent;

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free(struct alt_CGlobalSyncedMetaDataChangeEvent* ptr);

CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CEvent_to_alt_CGlobalSyncedMetaDataChangeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CGlobalSyncedMetaDataChangeEvent_to_alt_CEvent(struct alt_CGlobalSyncedMetaDataChangeEvent* from);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Create(alt_CEvent_Type _type, struct alt_CGlobalSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CGlobalSyncedMetaDataChangeEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CGlobalSyncedMetaDataChangeEvent_GetType(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI _Bool alt_CGlobalSyncedMetaDataChangeEvent_WasCancelled(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Cancel(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Create_1(struct alt_CEvent* _p0, struct alt_CGlobalSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CGlobalSyncedMetaDataChangeEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Assign_constCEventRef(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Create_2(struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal, struct alt_CGlobalSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CGlobalSyncedMetaDataChangeEvent_Create_2_CAPI_Heap(struct alt_StringView* _key, struct alt_RefBase_RefStore_constIMValue* _val, struct alt_RefBase_RefStore_constIMValue* _oldVal);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_GetKey(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_CGlobalSyncedMetaDataChangeEvent_GetKey_CAPI_Heap(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_GetVal(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CGlobalSyncedMetaDataChangeEvent_GetVal_CAPI_Heap(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_GetOldVal(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_CGlobalSyncedMetaDataChangeEvent_GetOldVal_CAPI_Heap(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Create_3(struct alt_CGlobalSyncedMetaDataChangeEvent* _p0, struct alt_CGlobalSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CGlobalSyncedMetaDataChangeEvent_Create_3_CAPI_Heap(struct alt_CGlobalSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Create_4(struct alt_CGlobalSyncedMetaDataChangeEvent* _p0, struct alt_CGlobalSyncedMetaDataChangeEvent* _returnValue);

// Return ptr must be manually freed with alt_CGlobalSyncedMetaDataChangeEvent_CAPI_Free()
CAPI struct alt_CGlobalSyncedMetaDataChangeEvent* alt_CGlobalSyncedMetaDataChangeEvent_Create_4_CAPI_Heap(struct alt_CGlobalSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Assign_constCGlobalSyncedMetaDataChangeEventRef(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_CGlobalSyncedMetaDataChangeEvent* _p0);

CAPI void alt_CGlobalSyncedMetaDataChangeEvent_Assign_CGlobalSyncedMetaDataChangeEventRefRef(struct alt_CGlobalSyncedMetaDataChangeEvent* _instance, struct alt_CGlobalSyncedMetaDataChangeEvent* _p0);


typedef struct alt_CVehicleDestroyEvent {
    void* vtable;
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
} alt_CVehicleDestroyEvent;

CAPI void alt_CVehicleDestroyEvent_CAPI_Free(struct alt_CVehicleDestroyEvent* ptr);

CAPI struct alt_CVehicleDestroyEvent* alt_CEvent_to_alt_CVehicleDestroyEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CVehicleDestroyEvent_to_alt_CEvent(struct alt_CVehicleDestroyEvent* from);

CAPI void alt_CVehicleDestroyEvent_Create(alt_CEvent_Type _type, struct alt_CVehicleDestroyEvent* _returnValue);

// Return ptr must be manually freed with alt_CVehicleDestroyEvent_CAPI_Free()
CAPI struct alt_CVehicleDestroyEvent* alt_CVehicleDestroyEvent_Create_CAPI_Heap(alt_CEvent_Type _type);

CAPI alt_CEvent_Type alt_CVehicleDestroyEvent_GetType(struct alt_CVehicleDestroyEvent* _instance);

CAPI _Bool alt_CVehicleDestroyEvent_WasCancelled(struct alt_CVehicleDestroyEvent* _instance);

CAPI void alt_CVehicleDestroyEvent_Cancel(struct alt_CVehicleDestroyEvent* _instance);

CAPI void alt_CVehicleDestroyEvent_Create_1(struct alt_CEvent* _p0, struct alt_CVehicleDestroyEvent* _returnValue);

// Return ptr must be manually freed with alt_CVehicleDestroyEvent_CAPI_Free()
CAPI struct alt_CVehicleDestroyEvent* alt_CVehicleDestroyEvent_Create_1_CAPI_Heap(struct alt_CEvent* _p0);

CAPI void alt_CVehicleDestroyEvent_Assign_constCEventRef(struct alt_CVehicleDestroyEvent* _instance, struct alt_CEvent* _p0);


CAPI void alt_CVehicleDestroyEvent_Create_2(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_CVehicleDestroyEvent* _returnValue);

// Return ptr must be manually freed with alt_CVehicleDestroyEvent_CAPI_Free()
CAPI struct alt_CVehicleDestroyEvent* alt_CVehicleDestroyEvent_Create_2_CAPI_Heap(struct alt_RefBase_RefStore_IVehicle* _target);

CAPI void alt_CVehicleDestroyEvent_GetTarget(struct alt_CVehicleDestroyEvent* _instance, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CVehicleDestroyEvent_GetTarget_CAPI_Heap(struct alt_CVehicleDestroyEvent* _instance);

CAPI void alt_CVehicleDestroyEvent_Create_3(struct alt_CVehicleDestroyEvent* _p0, struct alt_CVehicleDestroyEvent* _returnValue);

// Return ptr must be manually freed with alt_CVehicleDestroyEvent_CAPI_Free()
CAPI struct alt_CVehicleDestroyEvent* alt_CVehicleDestroyEvent_Create_3_CAPI_Heap(struct alt_CVehicleDestroyEvent* _p0);

CAPI void alt_CVehicleDestroyEvent_Create_4(struct alt_CVehicleDestroyEvent* _p0, struct alt_CVehicleDestroyEvent* _returnValue);

// Return ptr must be manually freed with alt_CVehicleDestroyEvent_CAPI_Free()
CAPI struct alt_CVehicleDestroyEvent* alt_CVehicleDestroyEvent_Create_4_CAPI_Heap(struct alt_CVehicleDestroyEvent* _p0);

CAPI void alt_CVehicleDestroyEvent_Assign_constCVehicleDestroyEventRef(struct alt_CVehicleDestroyEvent* _instance, struct alt_CVehicleDestroyEvent* _p0);

CAPI void alt_CVehicleDestroyEvent_Assign_CVehicleDestroyEventRefRef(struct alt_CVehicleDestroyEvent* _instance, struct alt_CVehicleDestroyEvent* _p0);


typedef struct alt_IPackage {
    void* vtable;
} alt_IPackage;

CAPI void alt_IPackage_CAPI_Free(struct alt_IPackage* ptr);

typedef enum alt_IPackage_Mode {
    ALT_IPACKAGE_MODE_READ = 0,
    ALT_IPACKAGE_MODE_WRITE = 1
};

CAPI alt_IPackage_Mode alt_IPackage_GetMode(struct alt_IPackage* _instance);

CAPI _Bool alt_IPackage_FileExists(struct alt_IPackage* _instance, struct alt_StringView* path);

CAPI struct alt_IPackage_File* alt_IPackage_OpenFile(struct alt_IPackage* _instance, struct alt_StringView* path);

CAPI void alt_IPackage_CloseFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

CAPI unsigned long long alt_IPackage_GetFileSize(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

typedef enum alt_IPackage_SeekOrigin {
    ALT_IPACKAGE_SEEKORIGIN_SET = 0,
    ALT_IPACKAGE_SEEKORIGIN_CUR = 1,
    ALT_IPACKAGE_SEEKORIGIN_END = 2
};

CAPI void alt_IPackage_SeekFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, unsigned long long offset, alt_IPackage_SeekOrigin origin);

CAPI unsigned long long alt_IPackage_TellFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

CAPI unsigned long long alt_IPackage_ReadFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);

CAPI unsigned long long alt_IPackage_WriteFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);


typedef struct alt_IPackage_File {
    void* vtable;
} alt_IPackage_File;

CAPI void alt_IPackage_File_CAPI_Free(struct alt_IPackage_File* ptr);

CAPI void alt_IPackage_File_Assign_constIPackage_FileRef(struct alt_IPackage_File* _instance, struct alt_IPackage_File* _p0);


typedef struct alt_IScriptRuntime {
    void* vtable;
} alt_IScriptRuntime;

CAPI void alt_IScriptRuntime_CAPI_Free(struct alt_IScriptRuntime* ptr);

CAPI _Bool alt_IScriptRuntime_RequiresMain(struct alt_IScriptRuntime* _instance);

CAPI struct alt_IResource_Impl* alt_IScriptRuntime_CreateImpl(struct alt_IScriptRuntime* _instance, struct alt_IResource* resource);

CAPI void alt_IScriptRuntime_DestroyImpl(struct alt_IScriptRuntime* _instance, struct alt_IResource_Impl* impl);

CAPI void alt_IScriptRuntime_OnTick(struct alt_IScriptRuntime* _instance);

CAPI void alt_IScriptRuntime_OnDispose(struct alt_IScriptRuntime* _instance);

CAPI void alt_IScriptRuntime_Assign_constIScriptRuntimeRef(struct alt_IScriptRuntime* _instance, struct alt_IScriptRuntime* _p0);


typedef struct alt_KeyState {
    _Bool down;
    _Bool toggled;
} alt_KeyState;

CAPI void alt_KeyState_CAPI_Free(struct alt_KeyState* ptr);

CAPI void alt_KeyState_Create(_Bool down, _Bool toggled, struct alt_KeyState* _returnValue);

// Return ptr must be manually freed with alt_KeyState_CAPI_Free()
CAPI struct alt_KeyState* alt_KeyState_Create_CAPI_Heap(_Bool down, _Bool toggled);

CAPI _Bool alt_KeyState_IsDown(struct alt_KeyState* _instance);

CAPI _Bool alt_KeyState_IsToggled(struct alt_KeyState* _instance);


typedef struct alt_ICore {
    void* vtable;
} alt_ICore;

CAPI void alt_ICore_LogInfo(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI void alt_ICore_LogDebug(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI void alt_ICore_LogWarning(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI void alt_ICore_LogError(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI void alt_ICore_LogColored(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI void alt_ICore_CreateMValueNone(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IMValueNone* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueNone_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueNone* alt_ICore_CreateMValueNone_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_CreateMValueNil(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IMValueNil* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueNil_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueNil* alt_ICore_CreateMValueNil_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_CreateMValueBool(struct alt_ICore* _instance, _Bool val, struct alt_RefBase_RefStore_IMValueBool* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueBool_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueBool* alt_ICore_CreateMValueBool_CAPI_Heap(struct alt_ICore* _instance, _Bool val);

CAPI void alt_ICore_CreateMValueInt(struct alt_ICore* _instance, long long val, struct alt_RefBase_RefStore_IMValueInt* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueInt_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueInt* alt_ICore_CreateMValueInt_CAPI_Heap(struct alt_ICore* _instance, long long val);

CAPI void alt_ICore_CreateMValueUInt(struct alt_ICore* _instance, unsigned long long val, struct alt_RefBase_RefStore_IMValueUInt* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueUInt_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueUInt* alt_ICore_CreateMValueUInt_CAPI_Heap(struct alt_ICore* _instance, unsigned long long val);

CAPI void alt_ICore_CreateMValueDouble(struct alt_ICore* _instance, double val, struct alt_RefBase_RefStore_IMValueDouble* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDouble_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueDouble* alt_ICore_CreateMValueDouble_CAPI_Heap(struct alt_ICore* _instance, double val);

CAPI void alt_ICore_CreateMValueString(struct alt_ICore* _instance, struct alt_String* val, struct alt_RefBase_RefStore_IMValueString* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueString_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueString* alt_ICore_CreateMValueString_CAPI_Heap(struct alt_ICore* _instance, struct alt_String* val);

CAPI void alt_ICore_CreateMValueList(struct alt_ICore* _instance, unsigned long long size, struct alt_RefBase_RefStore_IMValueList* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueList_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueList* alt_ICore_CreateMValueList_CAPI_Heap(struct alt_ICore* _instance, unsigned long long size);

CAPI void alt_ICore_CreateMValueDict(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IMValueDict* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDict_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueDict* alt_ICore_CreateMValueDict_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_CreateMValueBaseObject(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IBaseObject* val, struct alt_RefBase_RefStore_IMValueBaseObject* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueBaseObject_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueBaseObject* alt_ICore_CreateMValueBaseObject_CAPI_Heap(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IBaseObject* val);

CAPI void alt_ICore_CreateMValueFunction(struct alt_ICore* _instance, struct alt_IMValueFunction_Impl* impl, struct alt_RefBase_RefStore_IMValueFunction* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueFunction_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueFunction* alt_ICore_CreateMValueFunction_CAPI_Heap(struct alt_ICore* _instance, struct alt_IMValueFunction_Impl* impl);

CAPI void alt_ICore_CreateMValueVector3(struct alt_ICore* _instance, struct alt_Vector_float_3_VectorLayout_float_3* val, struct alt_RefBase_RefStore_IMValueVector3* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueVector3_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueVector3* alt_ICore_CreateMValueVector3_CAPI_Heap(struct alt_ICore* _instance, struct alt_Vector_float_3_VectorLayout_float_3* val);

CAPI void alt_ICore_CreateMValueRGBA(struct alt_ICore* _instance, struct alt_RGBA* val, struct alt_RefBase_RefStore_IMValueRGBA* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueRGBA_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueRGBA* alt_ICore_CreateMValueRGBA_CAPI_Heap(struct alt_ICore* _instance, struct alt_RGBA* val);

CAPI void alt_ICore_CreateMValueByteArray(struct alt_ICore* _instance, unsigned char* data, unsigned long long size, struct alt_RefBase_RefStore_IMValueByteArray* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueByteArray_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueByteArray* alt_ICore_CreateMValueByteArray_CAPI_Heap(struct alt_ICore* _instance, unsigned char* data, unsigned long long size);

CAPI void alt_ICore_CreateMValueByteArray_1(struct alt_ICore* _instance, unsigned long long size, struct alt_RefBase_RefStore_IMValueByteArray* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueByteArray_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IMValueByteArray* alt_ICore_CreateMValueByteArray_1_CAPI_Heap(struct alt_ICore* _instance, unsigned long long size);

CAPI _Bool alt_ICore_IsDebug(struct alt_ICore* _instance);

CAPI unsigned int alt_ICore_Hash(struct alt_ICore* _instance, struct alt_StringView* str);

CAPI _Bool alt_ICore_RegisterScriptRuntime(struct alt_ICore* _instance, struct alt_StringView* resourceType, struct alt_IScriptRuntime* runtime);

CAPI _Bool alt_ICore_FileExists(struct alt_ICore* _instance, struct alt_StringView* path);

CAPI void alt_ICore_FileRead(struct alt_ICore* _instance, struct alt_StringView* path, struct alt_String* _returnValue);

// Return ptr must be manually freed with alt_String_CAPI_Free()
CAPI struct alt_String* alt_ICore_FileRead_CAPI_Heap(struct alt_ICore* _instance, struct alt_StringView* path);

CAPI struct alt_IResource* alt_ICore_GetResource(struct alt_ICore* _instance, struct alt_StringView* name);

CAPI void alt_ICore_GetEntityByID(struct alt_ICore* _instance, unsigned short id, struct alt_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_ICore_GetEntityByID_CAPI_Heap(struct alt_ICore* _instance, unsigned short id);

CAPI void alt_ICore_GetEntities(struct alt_ICore* _instance, struct alt_Array_RefBase_RefStore_IEntity* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IEntity_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_IEntity* alt_ICore_GetEntities_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_GetPlayers(struct alt_ICore* _instance, struct alt_Array_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_IPlayer* alt_ICore_GetPlayers_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_GetVehicles(struct alt_ICore* _instance, struct alt_Array_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_IVehicle* alt_ICore_GetVehicles_CAPI_Heap(struct alt_ICore* _instance);

CAPI void alt_ICore_TriggerLocalEvent(struct alt_ICore* _instance, struct alt_StringView* ev, struct alt_Array_RefBase_RefStore_constIMValue* args);

CAPI _Bool alt_ICore_HasMetaData(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI void alt_ICore_GetMetaData(struct alt_ICore* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_ICore_GetMetaData_CAPI_Heap(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI void alt_ICore_SetMetaData(struct alt_ICore* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_ICore_DeleteMetaData(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI _Bool alt_ICore_HasSyncedMetaData(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI void alt_ICore_GetSyncedMetaData(struct alt_ICore* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_constIMValue* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_CAPI_Free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_ICore_GetSyncedMetaData_CAPI_Heap(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI void alt_ICore_GetRootDirectory(struct alt_ICore* _instance, struct alt_StringView* _returnValue);

// Return ptr must be manually freed with alt_StringView_CAPI_Free()
CAPI struct alt_StringView* alt_ICore_GetRootDirectory_CAPI_Heap(struct alt_ICore* _instance);

CAPI struct alt_IResource* alt_ICore_StartResource(struct alt_ICore* _instance, struct alt_StringView* name);

CAPI void alt_ICore_StopResource(struct alt_ICore* _instance, struct alt_StringView* name);

CAPI struct alt_IResource* alt_ICore_RestartResource(struct alt_ICore* _instance, struct alt_StringView* name);

CAPI void alt_ICore_TriggerClientEvent(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, struct alt_StringView* ev, struct alt_Array_RefBase_RefStore_constIMValue* args);

CAPI void alt_ICore_SetSyncedMetaData(struct alt_ICore* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

CAPI void alt_ICore_DeleteSyncedMetaData(struct alt_ICore* _instance, struct alt_StringView* key);

CAPI void alt_ICore_CreateVehicle(struct alt_ICore* _instance, unsigned int model, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_RotationLayout* rot, struct alt_RefBase_RefStore_IVehicle* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_ICore_CreateVehicle_CAPI_Heap(struct alt_ICore* _instance, unsigned int model, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_RotationLayout* rot);

CAPI void alt_ICore_CreateCheckpoint(struct alt_ICore* _instance, unsigned char type, struct alt_Vector_float_3_PointLayout* pos, float radius, float height, struct alt_RGBA* color, struct alt_RefBase_RefStore_ICheckpoint* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_ICheckpoint_CAPI_Free()
CAPI struct alt_RefBase_RefStore_ICheckpoint* alt_ICore_CreateCheckpoint_CAPI_Heap(struct alt_ICore* _instance, unsigned char type, struct alt_Vector_float_3_PointLayout* pos, float radius, float height, struct alt_RGBA* color);

CAPI void alt_ICore_CreateBlip(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_Vector_float_3_PointLayout* pos, struct alt_RefBase_RefStore_IBlip* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBlip_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBlip* alt_ICore_CreateBlip_CAPI_Heap(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_Vector_float_3_PointLayout* pos);

CAPI void alt_ICore_CreateBlip_1(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_RefBase_RefStore_IEntity* attachTo, struct alt_RefBase_RefStore_IBlip* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IBlip_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IBlip* alt_ICore_CreateBlip_1_CAPI_Heap(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_RefBase_RefStore_IEntity* attachTo);

CAPI void alt_ICore_CreateVoiceChannel(struct alt_ICore* _instance, _Bool spatial, float maxDistance, struct alt_RefBase_RefStore_IVoiceChannel* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IVoiceChannel_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IVoiceChannel* alt_ICore_CreateVoiceChannel_CAPI_Heap(struct alt_ICore* _instance, _Bool spatial, float maxDistance);

CAPI void alt_ICore_CreateColShapeCylinder(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, float height, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCylinder_CAPI_Heap(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, float height);

CAPI void alt_ICore_CreateColShapeSphere(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeSphere_CAPI_Heap(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius);

CAPI void alt_ICore_CreateColShapeCircle(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCircle_CAPI_Heap(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius);

CAPI void alt_ICore_CreateColShapeCube(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_PointLayout* pos2, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCube_CAPI_Heap(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_PointLayout* pos2);

CAPI void alt_ICore_CreateColShapeRectangle(struct alt_ICore* _instance, float x1, float y1, float x2, float y2, float z, struct alt_RefBase_RefStore_IColShape* _returnValue);

// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_CAPI_Free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeRectangle_CAPI_Heap(struct alt_ICore* _instance, float x1, float y1, float x2, float y2, float z);

CAPI void alt_ICore_DestroyBaseObject(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IBaseObject* handle);

CAPI void alt_ICore_GetPlayersByName(struct alt_ICore* _instance, struct alt_StringView* name, struct alt_Array_RefBase_RefStore_IPlayer* _returnValue);

// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IPlayer_CAPI_Free()
CAPI struct alt_Array_RefBase_RefStore_IPlayer* alt_ICore_GetPlayersByName_CAPI_Heap(struct alt_ICore* _instance, struct alt_StringView* name);

CAPI unsigned int alt_ICore_GetNetTime(struct alt_ICore* _instance);

CAPI struct alt_ICore* alt_ICore_Instance();

CAPI void alt_ICore_SetInstance(struct alt_ICore* server);

CAPI void alt_ICore_Assign_constICoreRef(struct alt_ICore* _instance, struct alt_ICore* _p0);


CAPI void alt_config_Error_CAPI_Free(struct alt_config_Error* ptr);

CAPI char* alt_config_Error_what(struct alt_config_Error* _instance);

CAPI unsigned long long alt_config_Error_position(struct alt_config_Error* _instance);

CAPI unsigned long long alt_config_Error_line(struct alt_config_Error* _instance);

CAPI unsigned long long alt_config_Error_column(struct alt_config_Error* _instance);

CAPI void alt_config_Error_Create_1(struct alt_config_Error* _p0, struct alt_config_Error* _returnValue);

// Return ptr must be manually freed with alt_config_Error_CAPI_Free()
CAPI struct alt_config_Error* alt_config_Error_Create_1_CAPI_Heap(struct alt_config_Error* _p0);

CAPI void alt_config_Error_Create_2(struct alt_config_Error* _p0, struct alt_config_Error* _returnValue);

// Return ptr must be manually freed with alt_config_Error_CAPI_Free()
CAPI struct alt_config_Error* alt_config_Error_Create_2_CAPI_Heap(struct alt_config_Error* _p0);

CAPI void alt_config_Error_Assign_constconfig_ErrorRef(struct alt_config_Error* _instance, struct alt_config_Error* _p0);

CAPI void alt_config_Error_Assign_config_ErrorRefRef(struct alt_config_Error* _instance, struct alt_config_Error* _p0);


typedef enum alt_config_Node_Type {
    ALT_CONFIG_NODE_TYPE_NONE = 0,
    ALT_CONFIG_NODE_TYPE_SCALAR = 1,
    ALT_CONFIG_NODE_TYPE_LIST = 2,
    ALT_CONFIG_NODE_TYPE_DICT = 3
};

typedef struct alt_config_Node {
    alt_config_Node_Type type;
    struct alt_config_Node_Value* val;
} alt_config_Node;

CAPI void alt_config_Node_CAPI_Free(struct alt_config_Node* ptr);

CAPI void alt_config_Node_Create(struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_CAPI_Heap();

CAPI void alt_config_Node_Create_1(_Bool _val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_1_CAPI_Heap(_Bool _val);

CAPI void alt_config_Node_Create_2(double _val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_2_CAPI_Heap(double _val);

CAPI void alt_config_Node_Create_3(int val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_3_CAPI_Heap(int val);

CAPI void alt_config_Node_Create_4(unsigned int val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_4_CAPI_Heap(unsigned int val);

CAPI void alt_config_Node_Create_5(long long val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_5_CAPI_Heap(long long val);

CAPI void alt_config_Node_Create_6(unsigned long long val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_6_CAPI_Heap(unsigned long long val);

CAPI void alt_config_Node_Create_8(char* val, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_8_CAPI_Heap(char* val);

CAPI void alt_config_Node_Create_11(struct alt_config_Node* that, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Node_Create_11_CAPI_Heap(struct alt_config_Node* that);

CAPI void alt_config_Node_Assign_constconfig_NodeRef(struct alt_config_Node* _instance, struct alt_config_Node* that);

CAPI _Bool alt_config_Node_IsNone(struct alt_config_Node* _instance);

CAPI _Bool alt_config_Node_IsScalar(struct alt_config_Node* _instance);

CAPI _Bool alt_config_Node_IsList(struct alt_config_Node* _instance);

CAPI _Bool alt_config_Node_IsDict(struct alt_config_Node* _instance);

CAPI _Bool alt_config_Node_ToBool(struct alt_config_Node* _instance);

CAPI _Bool alt_config_Node_ToBool_1(struct alt_config_Node* _instance, _Bool def);

CAPI double alt_config_Node_ToNumber(struct alt_config_Node* _instance);

CAPI double alt_config_Node_ToNumber_1(struct alt_config_Node* _instance, double def);

CAPI struct alt_config_Node* alt_config_Node_Access_size_t(struct alt_config_Node* _instance, unsigned long long idx);

CAPI struct alt_config_Node* alt_config_Node_Access_constcharPtr(struct alt_config_Node* _instance, char* key);

CAPI _Bool alt_config_Node_To__Bool(struct alt_config_Node* _instance);


typedef struct alt_config_Node_Value {
    void* vtable;
} alt_config_Node_Value;

CAPI void alt_config_Parser_CAPI_Free(struct alt_config_Parser* ptr);

CAPI void alt_config_Parser_Create_2(char* data, unsigned long long size, struct alt_config_Parser* _returnValue);

// Return ptr must be manually freed with alt_config_Parser_CAPI_Free()
CAPI struct alt_config_Parser* alt_config_Parser_Create_2_CAPI_Heap(char* data, unsigned long long size);

CAPI void alt_config_Parser_Parse(struct alt_config_Parser* _instance, struct alt_config_Node* _returnValue);

// Return ptr must be manually freed with alt_config_Node_CAPI_Free()
CAPI struct alt_config_Node* alt_config_Parser_Parse_CAPI_Heap(struct alt_config_Parser* _instance);

CAPI void alt_config_Parser_Create_3(struct alt_config_Parser* _p0, struct alt_config_Parser* _returnValue);

// Return ptr must be manually freed with alt_config_Parser_CAPI_Free()
CAPI struct alt_config_Parser* alt_config_Parser_Create_3_CAPI_Heap(struct alt_config_Parser* _p0);

CAPI void alt_config_Parser_Create_4(struct alt_config_Parser* _p0, struct alt_config_Parser* _returnValue);

// Return ptr must be manually freed with alt_config_Parser_CAPI_Free()
CAPI struct alt_config_Parser* alt_config_Parser_Create_4_CAPI_Heap(struct alt_config_Parser* _p0);

CAPI void alt_config_Parser_Assign_config_ParserRefRef(struct alt_config_Parser* _instance, struct alt_config_Parser* _p0);


typedef enum alt_config_Parser_Token_Type {
    ALT_CONFIG_PARSER_TOKEN_TYPE_ARRAY_START = 0,
    ALT_CONFIG_PARSER_TOKEN_TYPE_ARRAY_END = 1,
    ALT_CONFIG_PARSER_TOKEN_TYPE_DICT_START = 2,
    ALT_CONFIG_PARSER_TOKEN_TYPE_DICT_END = 3,
    ALT_CONFIG_PARSER_TOKEN_TYPE_KEY = 4,
    ALT_CONFIG_PARSER_TOKEN_TYPE_SCALAR = 5
};

typedef struct alt_config_Emitter alt_config_Emitter;

CAPI void alt_config_Emitter_CAPI_Free(struct alt_config_Emitter* ptr);




#endif // _CAPI_H_
